I"Ç7<p>Example42‚Äôs <a href="https://github.com/example42/psick">psick control-repo</a> has several features which makes easier the life of the Puppet administrator.</p>

<p>Since the release of <a href="https://puppet.com/resources/solution-brief/puppet-tasks">Puppet Tasks</a> <a href="https://forge.puppet.com/example42/psick/tasks">several infrastructure commands</a> have been added as tasks in the <a href="https://github.com/example42/puppet-psick">psick module</a>:</p>

<ul>
  <li>psick::system_update - Update all packages on a system</li>
  <li>psick::puppet_unlock - Remove Puppet lockfiles</li>
  <li>psick::puppet_install - Install Puppet agent on a node</li>
  <li>psick::puppet_enable_noop - Enable noop option in Puppet agent config</li>
  <li>psick::puppet_agent - Run Puppet agent on a node</li>
</ul>

<p>In this post we review the different ways we can use to remotely trigger a Puppet task and (in this case psick::puppet_agent but can be any task from any <a href="https://forge.puppet.com/modules?with_tasks=true">module</a>):</p>

<ol>
  <li>Use the <a href="https://github.com/puppetlabs/bolt">bolt</a> command (OSS)</li>
  <li>Use the <a href="https://puppet.com/docs/pe/2017.3/orchestrator/running_tasks_from_the_command_line.html">puppet task</a> command (PE)</li>
  <li>Run Puppet tasks from Puppet Enterprise Web console</li>
  <li>Directly interact with PE Orchestrator APIs</li>
</ol>

<p>The above methods allow execution of any Puppet task, if we ‚Äújust‚Äù want to trigger Puppet agent execution on a remote node, we have some other, more or less classic, additional options:</p>

<ol>
  <li>Run Puppet from PE Web Console for single nodes</li>
  <li>Use MCollective</li>
  <li>Use Ansible, Fabric or any other [unattended] remote execution tool</li>
  <li>Run Puppet Use PCP broker and a custom PXP agent module</li>
</ol>

<p>In the examples here we use a single target node, but can be defined use multiple nodes or the ones identified by a <a href="https://puppet.com/docs/puppetdb/5.1/api/query/v4/pql.html">PQL</a> query.</p>

<h2 id="tasks-via-bolt-command-line-oss">Tasks via bolt command line (OSS)</h2>

<p>Bolt is the most direct tool we can use to remotely run Puppet tasks as it doesn‚Äôt need any agent installed on the target node.</p>

<p>Syntax to run a given task (psick::puppet_agent) on a given node (git.lab.psick.io) accessed via ssh as specified user (bolt, but can any user on the remote node which has our local ssh public key added to its authorized_hosts):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bolt task run psick::puppet_agent environment=host --modules /local/path/to/modules/ --user bolt remove -n git.lab.psick.io

git.lab.psick.io:

Info: Using configured environment 'host'
Info: Retrieving pluginfacts
Info: Retrieving plugin
Info: Loading facts
Info: Caching catalog for git.lab.psick.io
Info: Applying configuration version 'af0e48e - PE File Sync Service, Mon Jan 15 21:41:10 2018 +0100 : code-manager deploy signature: 'da3956ed288ad2573fc8cec722330e5618514525''
Notice: Applied catalog in 0.80 seconds
</code></pre></div></div>

<h2 id="tasks-via-puppet-task-command-pe">Tasks via puppet task command (PE)</h2>

<p>If we have Puppet Enterprise we can use the puppet task subcommand. Which requires <a href="https://puppet.com/docs/pe/2017.3/rbac/rbac_token_auth_intro.html">token based authentication</a> and interacts directly with Puppet orchestrator APIs (on port 8143 on the PE Puppet Server):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet task run psick::puppet_agent -n git.lab.psick.io

Starting job ...
New job ID: 395
Nodes: 1

Started on git.lab.psick.io ...
Finished on node git.lab.psick.io
  STDOUT:
    Info: Using configured environment 'host'
    Info: Retrieving pluginfacts
    Info: Retrieving plugin
    Info: Loading facts
    Info: Caching catalog for git.lab.psick.io
    Info: Applying configuration version 'af0e48e - PE File Sync Service, Mon Jan 15 21:41:10 2018 +0100 : code-manager deploy signature: 'da3956ed288ad2573fc8cec722330e5618514525''
    Notice: Applied catalog in 0.73 seconds

Job completed. 1/1 nodes succeeded.
Duration: 11 sec
</code></pre></div></div>

<h2 id="tasks-via-pe-web-console">Tasks via PE Web Console</h2>

<p>From Puppet Enterprise 2017.3.0 onwards it‚Äôs possible to select tasks from the modules available on the PE server. Click on the RUN - Task menu to access an easy to use web interface where to choose the tasks to run. Note that from the RUN - Puppet menu entry it‚Äôs possible to trigger a Puppet run on a emote node using the native method based on PXP.</p>

<p>The list of Puppet Jobs executed (both tasks and puppet runs) are visible from the INSPECT - Jobs menu entry or via the command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet job show
</code></pre></div></div>

<p>For more details check the <a href="https://puppet.com/docs/pe/2017.3/orchestrator/running_tasks_in_the_console.html">official documentation</a></p>

<h2 id="tasks-via-orchestrator-apis">Tasks via Orchestrator APIs</h2>

<p>Finally we can query directly the PE<a href="https://puppet.com/docs/pe/2017.3/orchestrator/orchestrator_api_v1_endpoints.html">Orchestrator API</a>, which as with the puppet job command, requires a <a href="https://puppet.com/docs/pe/2017.3/rbac/rbac_token_auth_intro.html">token</a> and proper <a href="https://puppet.com/docs/pe/2017.3/rbac/managing_access.html">RBAC permissions</a>.</p>

<p>The generated token has to be added to the http headers of our API calls.</p>

<p>Tasks have a specific API endpoint: the command endpoint.</p>

<p>Task parameters are added to the payload of the request. Affected nodes can be listed as array.</p>

<p>The following example shows how to build the <code class="highlighter-rouge">curl</code> command call:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -k -X POST \
  -H "Content-Type: application/json" \
  -H 'X-Authentication:&lt;token&gt;' \
  https://&lt;mom or compile master&gt;:8143/orchestrator/v1/command/task \
  -d '{
    "environment" : "production",
    "task" : "psick::puppet_agent",
    "params" : {
      "noop" : true,
      "puppet_master" : "&lt;compile master to use for this specific agent run&gt;"
    },
    "scope" : {
      "nodes" : ["&lt;node1&gt;", "&lt;node2&gt;"]
    }
  }'
</code></pre></div></div>

<p>This will return the following Output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "job" : {
    "id" : "https://&lt;mom or compile master&gt;:8143/orchestrator/v1/jobs/12",
    "name" : "12"
  }
}
</code></pre></div></div>

<p>Read result from job:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -k -X GET \
  -H 'X-Authentication:&lt;token&gt;' \
  https://&lt;mom or compile master&gt;:8143/orchestrator/v1/jobs/12
</code></pre></div></div>

<p>End of output while still running:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  "node_count" : 1,
  "node_states" : {
    "running" : 1
  }
</code></pre></div></div>

<p>End of output when finished:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  "node_count" : 1,
  "node_states" : {
    "finished" : 1
  }
</code></pre></div></div>

<p>Read node results:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -k -X GET \
  -H 'X-Authentication:&lt;token&gt;' \
  https://&lt;mom or compile master&gt;:8143/orchestrator/v1/jobs/12/nodes
</code></pre></div></div>

<p>Output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "items" : [ {
    "finish_timestamp" : "2018-01-24T14:41:14Z",
    "transaction_uuid" : null,
    "start_timestamp" : "2018-01-24T14:40:18Z",
    "name" : "&lt;node1&gt;",
    "duration" : 55.795,
    "state" : "finished",
    "details" : { },
    "result" : {
              "_output" :
              "\u001B[0;32mInfo: Using configured environment 'production'\u001B[0m\n
              \u001B[0;32mInfo: Retrieving pluginfacts\u001B[0m\n
              \u001B[0;32mInfo: Retrieving plugin\u001B[0m\n
              \u001B[0;32mInfo: Loading facts\u001B[0m\n
              \u001B[0;32mInfo: Caching catalog for &lt;node1&gt;\u001B[0m\n
              \u001B[0;32mInfo: Applying configuration version '7a4be91 - Alessandro Franceschi, Sun Jan 14 18:15:44 2018 +0100 : run acceptance tests also for newer puppet versions (#220) (#221)'\u001B[0m\n
              \u001B[mNotice: /Stage[main]/Psick::Dns::Resolver/File[/etc/resolv.conf]/content: \n
              --- /etc/resolv.conf\t2018-01-24 14:31:51.428194104 +0000\n
              +++ /tmp/puppet-file20180124-20270-1wxros6\t2018-01-24 14:40:44.602327849 +0000\n
              @@ -1,3 +1,3 @@\n-# Generated by NetworkManager\n
              -search pe.psick.io\n-nameserver 10.0.2.3\n
              +#File managed by Puppet\n
              +nameserver 8.8.8.8\n
              +nameserver 8.8.4.4\n
              \u001B[0m\n
              \u001B[0;32mInfo: Computing checksum on file /etc/resolv.conf\u001B[0m\n
              \u001B[0;32mInfo: FileBucket got a duplicate file {md5}b9dfc6d9764870be83fe35ecf2cfc5f3\u001B[0m\n
              \u001B[0;32mInfo: /Stage[main]/Psick::Dns::Resolver/File[/etc/resolv.conf]: Filebucketed /etc/resolv.conf to puppet with sum b9dfc6d9764870be83fe35ecf2cfc5f3\u001B[0m\n
              \u001B[mNotice: /Stage[main]/Psick::Dns::Resolver/File[/etc/resolv.conf]/content: \n
              \u001B[0m\n\u001B[mNotice: /Stage[main]/Psick::Dns::Resolver/File[/etc/resolv.conf]/content: content changed '{md5}b9dfc6d9764870be83fe35ecf2cfc5f3' to '{md5}3ccdb679ea166bdf52104b3ae3a4499d'\u001B[0m\n
              \u001B[mNotice: Applied catalog in 29.16 seconds\u001B[0m\n"
    },
    "latest-event-id" : 41,
    "timestamp" : "2018-01-24T14:41:14Z"
  } ],
  "next-events" : {
    "id" : "https://&lt;node1&gt;:8143/orchestrator/v1/jobs/14/events?start=42",
    "event" : "42"
  }
}
</code></pre></div></div>

<h2 id="remote-puppet-agent-run-using-other-methods-not-as-tasks">Remote Puppet agent run using other methods (not as tasks)</h2>

<p>All the above cases can be applied to any task, but if we just need to remotely trigger a Puppet agent execution, various other ways are available.</p>

<p>We have already seen how it possible to trigger Puppet runs (not as tasks) from the PE Web Console, possible from the RUN - Puppet menu entry, or, for a specific node, directly from the details page (Run Puppet link).</p>

<p>It has been possible for long to run Puppet (and do a lot of other actions) via <a href="https://puppet.com/docs/pe/2017.3/managing_mcollective/invoking_mcollective_actions.html">MCollective</a>.</p>

<p>We can also use Ansible, Fabric, or other tools for orchestration or remote command execution.</p>

<p>On PSICK for example, this is possible, if using Fabric, with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fab puppet.agent:host=git.lab.psick.io
</code></pre></div></div>

<p>Finally it‚Äôs potentially possible to trigger Puppet runs (and potentially other commands) directly via the PCP Broker and eventually a custom PXP Module.</p>

<p>ATTENTION: this solution is NOT working at the moment as the PCP broker is not yet opened and documented.</p>

<p>First we need a pxp-agent module on the nodes. An example can be found in the <a href="https://github.com/puppetlabs/pxp-agent/blob/master/modules/pxp-module-puppet.md">pxp-agent repository</a> and this is actually basically the only existing one (and the one currently used under the hood when remote Puppet run is triggered from the PE Console Web interface).</p>

<p>For development purpose the module can be executed locally:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo echo "{\"input\":{\"flags\":[\"--noop\", \"--server=puppet.pe.psick.io\"]}, \"configuration\" : {\"puppet_bin\" : \"/opt/puppetlabs/bin/puppet\"}}" | /etc/puppetlabs/pxp-agent/modules/puppet_agent run
</code></pre></div></div>

<p>The following is not working, as the API is unknown. Could be something similar to the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -k -X POST \
  -H "Content-Type: application/json" \
  -H 'X-Authentication:0MDuxrsDQnQbzGn1P_4sWu4hgzg8AvQk0sebRuReGiZI' \
  https://puppet.pe.psick.io:8142/orchestrator/v1/command/task \
  -d '{
    "properties" : {
      "notify_outcome" : true,
      "module" : "puppet_agent",
      "action" : "run",
      "params" : {
        "flags" : [ "--noop" ]
      }
    },
    "required" : ["transaction_id", "notify_outcome", module", "action"],
    "additionalProperties" : false
  }'
</code></pre></div></div>

<p>We have a <a href="https://tickets.puppetlabs.com/browse/PCP-830">ticket at Puppet open</a> for opening PCP broker API.</p>

<h2 id="conclusion">Conclusion</h2>

<p>As we have seen there are multiple ways to remotely trigger a Puppet agent execution from a central node and there are various ways to trigger a Puppet task to achieve the same result.</p>

<p>The ability to orchestrate Puppet execution can affect our choices on how we decide to manage how infrastructure via Puppet, allowing many combination of options, such as:</p>

<ul>
  <li>Normal Puppet agent running every [30] minutes + On request remotely triggered Puppet runs</li>
  <li>Normal Puppet agents 30 minutes in noop mode + On request no-noop Puppet runs</li>
  <li>Puppet runs triggered on Canary nodes during CI</li>
  <li>Puppet runs only on request, without always running agents</li>
  <li>Staged rollouts of configurations via remotely orchestrated Puppet runs.</li>
</ul>

<p>Note that in most of the above examples we can see the result of the Puppet run only after it has ended and not in real-time.</p>

<p>Happy Puppet orchestration, with or without PSICK,</p>

<p>Martin Alfke</p>

<p>Alessandro Franceschi</p>
:ET