I"+<p>Example42’s <a href="https://github.com/example42/puppet-psick">psick module</a> has several features which allows users to manage most of the typical infrastructure tasks with a single module.</p>

<p>One of them is classification: we can use it to define which classes we want on each node via Hiera data.</p>

<p>The module provides different parameters to manage in which phase of a Puppet run we want to include classes for different major families of operating systems (Linux, Windows, Solaris, Darwin…).</p>

<h3 id="classification-via-psick-module">Classification via psick module</h3>

<p>Psick has a different subclass for each phase:</p>

<ul>
  <li><strong>pre</strong>, in this phase prerequisites classes are included, they are applied before all the other ones.</li>
  <li><strong>base</strong>, classes common to all the nodes (but exceptions can be applied via Hiera), applied in normal catalog runs after the pre classes and before the profiles.</li>
  <li><strong>profiles</strong>, exactly as in the roles and profiles pattern. The profile classes that differentiate nodes by their role or function. Profiles are applied after the base classes are managed.</li>
</ul>

<p>Installation of the psick module from the Forge can be done with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet module install example42/PSICK
</code></pre></div></div>

<p>In order to be able to access Psick’s features you just have to add the psick class to your catalog, this can be done, at top scope for each node, in the main manifest (<code class="highlighter-rouge">manifests/site.pp</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include psick
</code></pre></div></div>

<p>This does nothing by default, every psick configuration is data driven.</p>

<p>The classes to include in each phase can be managed via Hiera, for different OS, as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Classes to include in pre, base and profiles phases on Linux
# (different distros are expected to be managed in the defined classes)
psick::pre::linux_classes:
  puppet: ::puppet
  dns: psick::dns::resolver
  hostname: psick::hostname
  hosts: psick::hosts::resource
  repo: psick::repo
psick::base::linux_classes:
  sudo: psick::sudo
  time: psick::time
  sysctl: psick::sysctl
  update: psick::update
  ssh: psick::openssh::tp
  mail: psick::postfix::tp
psick::profiles::linux_classes:
  webserver: apache

# Classes to include in pre, base and profiles phases on Windows
psick::pre::windows_classes:
  hosts: psick::hosts::resource
psick::base::windows_classes:
  features: psick::windows::features
  registry: psick::windows::registry
  services: psick::windows::services
  time: psick::time
  users: psick::users::ad
psick::profiles::windows_classes:
  webserver: iis
</code></pre></div></div>

<p>Each key-pair of these ${kernel}_classes parameters contain an arbitrary tag or marker (users, time, services, but could be any string), and the name of the class to include.</p>

<p>This name must be a valid class, which can be found in the Puppet Master modulepath (so probably defined in your control-repo <code class="highlighter-rouge">Puppetfile</code>): you can use any of the existing Psick profiles, or your own local site profiles, or directly classes from public modules and configure them via Hiera in their own namespace.</p>

<p>To manage exceptions and use a different classes on different nodes you only have to specify the alternative class name as value for the used marker (here ‘ssh’), in the appropriate Hiera file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::base::linux_classes:
  ssh: ::profile::ssh_bastion
</code></pre></div></div>

<p>To completely disable on specific nodes the usage of a class, included in a general hierarchy level, set the class name to an empty string:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::base::linux_classes:
  ssh: ''
</code></pre></div></div>

<p>The pre -&gt; base -&gt; profiles order is strictly enforced, so be sure to place your class in the most appropriate phase (even if functionally they all do the same work: include the specified classes) and, to prevent dependency cycles, avoid to set the same class in two different phases.</p>

<h3 id="first-run-phase">First run phase</h3>

<p>A special phase, disabled by default, is applied only at the very first time Puppet is executed.</p>

<p>Its purpose is to give users the possibility to make configurations on a node via Puppet before actually making a full Puppet run.</p>

<p>Optionally, a reboot may be triggered at the end of this first Puppet run.</p>

<p>The next Puppet executions will use the normal configurations expected in each nodes.</p>

<p>Possible use cases for Firstrun mode:</p>

<ul>
  <li>Set a desired hostname on Windows, reboot and join an AD domain</li>
  <li>Install aws-sdk gem, reboot and have ec2_tags facts since the first real Puppet run</li>
  <li>Set external facts with configurable content (not via pluginsync) and run a catalog
 only when they are loaded (after the first run)</li>
  <li>Any case where a configuration or some installations have to be done
 in a separated and never repeating first run. With or without a
 system reboot.</li>
</ul>

<p>To enable first run mode set:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::enable_firstrun: true
</code></pre></div></div>

<p>To define which classes to include in nodes, according to each $::kernel, we have an approach similar to the one used for the pre, base and profiles phases:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::firstrun::windows_classes:
  hostname: psick::hostname
  aws_sdk: psick::aws::sdk
psick::firstrun::linux_classes:
  hostname: psick::hostname
  proxy: psick::proxy
  aws_sdk: psick::aws::sdk
</code></pre></div></div>

<p>To manage if we want to trigger a system reboot after the first run:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::firstrun::windows_reboot: true # (Default value)
psick::firstrun::linux_reboot: false # (Default value)
</code></pre></div></div>

<p>IMPORTANT NOTE: If firstrun mode is activated on an existing infrastructure or if
the ‘firstrun’ external fact is removed from nodes (we use this fact, configured the the same <code class="highlighter-rouge">psick::firstrun</code> class, to determine if Puppet has already been executed or not), this class will be included
in the main psick class as if this were a real first Puppet run.
This will trigger a, probably unwanted, reboot on Windows nodes (and in any other node for which reboot is configured.</p>

<p>Set psick::firstrun::${kernel}_reboot to false to prevent undesired reboots.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Phased, hiera data driven, classification and first run mode is just one of the features of the psick module, among the others (a rich set of profiles for common system settings and applications, a standardised set of tp profiles, some common use cases defines…). The good news is that you can decide which of such features to use and you can integrate psick in existing infrastructures where traditional classification techniques are used.</p>

<p>The bad news is that psick concept is so unusual that you might get some time to figure out its whole logic.</p>

<p>Perseverance, here as everywhere, is key to success :-)</p>

<p>Alessandro Franceschi
Martin Alfke</p>
:ET