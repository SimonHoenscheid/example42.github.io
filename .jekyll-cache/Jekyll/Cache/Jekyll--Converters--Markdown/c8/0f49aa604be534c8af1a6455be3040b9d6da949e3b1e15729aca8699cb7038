I"Î<p>Yes, we are cheating. Thereâ€™s not a single optimal hiera.yaml file to configure <a href="https://docs.puppet.com/hiera/">Hiera</a> in the perfect way for any infrastructure.</p>

<p>As usual different infrastructures may need different approaches and have different preferences on how and where to store data.</p>

<p>Here we are going to give a few suggestions on what could be common use cases.</p>

<h2 id="the-backend">The backend</h2>

<p>Hiera supports several <a href="https://www.packtpub.com/mapt/book/networking-and-servers/9781783981441/2/ch02lvl1sec16/additional-hiera-backends">different backends</a> (here is a more complete <a href="https://voxpupuli.org/plugins/#hiera">list</a>) where to store data. Unless you donâ€™t have specific needs or preferences, you will generally use a file based backend, as yaml and json.</p>

<p>Also, you will probably need to encrypt some of your data so youâ€™ll likely move your eyes on the <a href="https://github.com/TomPoulton/hiera-eyaml">hiera-eyaml</a> backend, which allows to easily encrypt some hiera keys in plain yaml files. In such a case, use ONLY the hiera-eyaml backend, thereâ€™s really no sense in having both it and the normal yaml backend. So your hiera.yaml file would begin with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
:backends:
  - eyaml
</code></pre></div></div>

<p>Then you have to configure hiera-eyaml. You have to provide the paths where keys used for encryption are stored. They are needed wherever a catalog, that uses encrypted data, is compiled, typically on the Puppet Server, but also in your development and testing stations (unless you take care to avoid to use encrypted keys in such environments).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:eyaml:
  :datadir: "/etc/puppetlabs/code/environments/%{environment}/hieradata"
  :pkcs7_private_key: '/etc/puppetlabs/keys/private_key.pkcs7.pem'
  :pkcs7_public_key: '/etc/puppetlabs/keys/public_key.pkcs7.pem'
  :extension: 'yaml'
</code></pre></div></div>

<p>Note that in the above configuration we place the keys in a dedicated directory outside the Puppet environment: we donâ€™t want to store in the same repo where we encrypt data the keys to decrypt it.</p>

<p>You may want to add a link called <code class="highlighter-rouge">keys</code> in your control-repo pointing to <code class="highlighter-rouge">/etc/puppetlabs/keys</code> in order to seamlessly be able to use a command like <code class="highlighter-rouge">eyaml edit hieradata/common.yaml</code> (eymal looks for its keys in a directory called <code class="highlighter-rouge">keys</code> in the cwd if their path is not defined in the <code class="highlighter-rouge">/etc/eyam/config.yaml</code> file).</p>

<h3 id="the-hierarchy">The hierarchy</h3>

<p>This is probably the part of your Hiera configuration where you will have to spend some time evaluating the best approach. You should not have too many levels in your hierarchy, definitively less than 10, they should start from the most specific one (where the same nodesâ€™ cert name is used) to the most generic.</p>

<p>The intermediary levels depend on your infrastructure and your decisions on them should be based on an evaluation of how values for the various configurations you manage may change in your setup according to different conditions.</p>

<p>Typically youâ€™ll have layers that represent the operational environment of your nodes (prod, qa, test, develâ€¦ here we call it $env as it does not match Puppetâ€™s environment for which thereâ€™s the internal $environment variable), their role and the datacenter, network or zone where they are placed.</p>

<p>So a possible <strong>sample</strong> hierarchy may look like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:hierarchy:
  - "hostname/%{::trusted.certname}"
  - "role/%{::role}-%{::env}"
  - "role/%{::role}"
  - "zone/%{::zone}"
  - common
</code></pre></div></div>

<p>Note that all the variables used in the hierarchy are top scope, and you need to define them in some way: either as facts or in an External Node Classifier (ENC) or in manifest/site.pp.</p>

<p>Note also that we havenâ€™t placed any reference to Operating System facts: even if (old) Hiera examples and online documentation used to have them in sample hierarchies, you generally should not need them: OS related settings should be managed directly in modules and classes, Hieraâ€™s hierarchy should reflect your own infrastructure logic, not the one of Operating Systems you use.</p>

<h3 id="conclusions">Conclusions</h3>

<p>Hiera has changed the way we work with Puppet. Since its introduction in Puppet 3 (before it was available as external add on) it has quickly become the standard tool to manage Puppet data and separate it from our code.</p>

<p>Should we use it? Yes definitively, thatâ€™s currently the best and most versatile solution around.</p>

<p>Should we place ALL our data there? It depends.</p>

<p>I personally prefer to leave inside my profile and local classes the company defaults and the OS related infos to avoid too much data in Hiera yaml files.
Also, when a ENC is used, I avoid to use it to store data, so that infrastructure data is not present in multiple places.
The only exception is when the ENC is used to set global parameters used in the hierarchy.</p>

<p>Still, your mileage may vary and you might find better or more fitting solutions for your use case.</p>

<p>Alessandro Franceschi</p>
:ET