I"Å<p>At last <a href="http://cfgmgmtcamp.eu/">Configuration Management Camp</a> we have presented <a href="https://www.slideshare.net/Alvagante/puppet-systems-infrastructure-construction-kit">PSICK</a>, giving some background info on the reasons behind it, an overview what it does and glimpses on how it can be used both for new and existing Puppet infrastructures.</p>

<p>In this post we are going to give a deeper look to how to cherry pick the profiles of the <a href="https://github.com/example42/puppet-psick">psick module</a> we may need in our current infrastructure.</p>

<h3 id="using-psick-module-in-existing-infrastructures">Using psick module in existing infrastructures</h3>

<p>The psick module makes large use of example42â€™s <a href="https://github.com/example42/puppet-tp">Tiny Puppet</a>, which provides defines that allow installation of management of applications in a quick and powerful ways.</p>

<p>Tiny Puppet requires the <a href="https://github.com/example42/tinydata">tinydata module</a>, where is stored the data of all the supported applications on different OS.</p>

<p>Both psick and tp need Puppetâ€™s stdlib module, but you probably have already it.</p>

<p>To use psick module add to your <code class="highlighter-rouge">Puppetfile</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod 'example42/psick', :latest
mod 'example42/tp', :latest
mod 'example42/tinydata', :latest
</code></pre></div></div>

<p>In a production environment we will likely specify fixed and tested versions, the current latest version of the above modules are:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mod 'example42/psick', :0.5.8
mod 'example42/tp', :2.1.0
mod 'example42/tinydata', :0.2.3
</code></pre></div></div>

<p>This may look a lot for not doing anything, by default, but these modules empower the possibility to manage a lot of common system configurations and applications: potentially saving you from adding several third party modules and giving you the power and flexibility of Tiny Puppet to manage applications on your site profiles.</p>

<p>Once you have psick in your modulepath, you have to classify the main psick class (whatever method you use to assign classes to nodes) with something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include psick
</code></pre></div></div>

<p>This is a prerequisite for all the psick profiles, as they use common variables evaluated in the psick main class. By default, by including the psick class, nothing is done on your nodes: just a few empty classes are added to your catalog (<code class="highlighter-rouge">psick::pre</code>, <code class="highlighter-rouge">psick::base</code>, <code class="highlighter-rouge">psick::profiles</code>: they can be used for classification done directly via the psick module, but thatâ€™s another feature we are not going to talk about here).</p>

<p>Then, when you need to manage an application or a component of your system, you will be able to choose from these options:</p>

<ul>
  <li>Find and use a public module that does the job</li>
  <li>Write a custom profile that wraps existing modules functionalities</li>
  <li>Write a custom profile or module that implements what you need without using external code (you can decide or not to use tp::install to manage your packages and service and tp::conf to manage your configuration files)</li>
  <li>Find and use a psick profile that does what you need.</li>
</ul>

<p>Usage of psick profiles is similar to the one of classes from existing modules: you classify nodes with the relevant class name, and then use hiera to configure it via itâ€™s parameters.</p>

<h3 id="psick-profiles">PSICK profiles</h3>

<p>Psick comes with a wide like of base profiles for common settings, here are the most significant ones:</p>

<ul>
  <li>psick::hosts - Manage /etc/hosts</li>
  <li>psick::motd - Manage /etc/motd and /etc/issue</li>
  <li>psick::nfs - Manage NFS client and server</li>
  <li>psick::sudo - Manage sudo configuration</li>
  <li>psick::sysctl - Manage sysctl settings</li>
  <li>psick::firewall - Manage firewalling</li>
  <li>psick::openssh - tp profile and keygen define</li>
  <li>psick::hardening - Manage system hardening</li>
  <li>psick::network - Manage networking</li>
  <li>psick::puppet - Manage Puppet components</li>
  <li>psick::users - Manage users</li>
  <li>psick::time - Manage time and timezones</li>
</ul>

<p>There are also several other application specific profiles, where itâ€™s generally possible to choose what module to use to manage the actual application (if a popular public module or Tiny Puppet):</p>

<ul>
  <li>psick::ansible - Manage Ansible installation</li>
  <li>psick::aws - Manage AWS client tools and VPC setup</li>
  <li>psick::bolt - Manage Bolt installation</li>
  <li>psick::docker - Docker installation and build tools</li>
  <li>psick::foreman - Foreman installation</li>
  <li>psick::git - Git installation and configuration</li>
  <li>psick::gitlab - GitLab installation and config</li>
  <li>psick::mariadb - Manage Mariadb</li>
  <li>psick::mysql - Manage Mysql</li>
  <li>psick::mongo - Manage Mongo</li>
  <li>psick::php - Manage php and modules</li>
  <li>psick::oracle - Manage Oracle prereq and setup</li>
  <li>psick::sensu - Manage Sensu</li>
</ul>

<p>In PSICK all the application profiles that use Tiny Puppet have a standard structure and common parameters. They have names like <code class="highlighter-rouge">psick::&lt;app&gt;::tp</code>, and are generated with pdk using this <a href="https://github.com/example42/pdk-module-template-tp-profile">template</a>.</p>

<p>TP encourages the usage of the template + options hash pattern, ad has some generic templates usable for common file structures. So, for example, to manage openssh with psick , we can:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include psick::openssh::tp
</code></pre></div></div>

<p>and configure it with parameters like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::openssh::tp::resources_hash:
  tp::conf:
    openssh:
      template: 'psick/generic/spaced.erb'
      options_hash:
        Protocol: 2
        PermitRootLogin: 'no'
        Subsystem: 'sftp /usr/libexec/openssh/sftp-server'
</code></pre></div></div>

<p>Here, by including the <code class="highlighter-rouge">psick::openssh::tp</code> profile we have Openssh package installed and the relevant service started. We configure it using the <code class="highlighter-rouge">resources_hash</code> parameter, common in all tp profiles, where for each configuration file to manage via <code class="highlighter-rouge">tp::conf</code>, or whole directories to manage with <code class="highlighter-rouge">tp::dir</code>, we specify name, and content (by using parameters like <code class="highlighter-rouge">source</code>, <code class="highlighter-rouge">content</code>, <code class="highlighter-rouge">template</code> or <code class="highlighter-rouge">epp</code>) and a custom <code class="highlighter-rouge">options_hash</code> where any parameter, referred in the used template, looked up in deep merge mode, can be managed via Hiera.</p>

<p>Alessandro Franceschi</p>
:ET