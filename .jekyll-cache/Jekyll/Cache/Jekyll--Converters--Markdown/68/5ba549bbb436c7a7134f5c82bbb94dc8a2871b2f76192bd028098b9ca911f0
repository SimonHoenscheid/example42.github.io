I"m<p>Many Puppet code bases are pure Puppet code without unit or integration testing.</p>

<p>Most maintainers of such a code base fear the work for adding tests to their code.</p>

<p>But what is it that you as a maintainer would like to achieve? Normally you are happy when you can check whether your Puppet code still compiles on a newer Puppet version.</p>

<p>Just adding this kind of unit tests is easy and depends on your code layout:</p>

<ul>
  <li>do you have repository per module</li>
  <li>do you have one monolithic repository</li>
</ul>

<p>Letâ€™s go for the first solution:</p>

<p>You need a Gemfile, a Rakefile, a .fixtures.yml and a spec/spec_helper.rb file.</p>

<p>The Gemfile can be short:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Gemfile
source 'https://rubygems.org'
gem 'puppetlabs_spec_helper'
gem 'puppet', ENV['PUPPET_GEM_VERSION'] || '~&gt; 4'
</code></pre></div></div>

<p>Yu can even omit the puppet gem and you get the latest version automatically. In our example you have the option to specify other versions via environment variables:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PUPPET_GEM_VERSION='~&gt; 3'
</code></pre></div></div>

<p>The Rakefile can be even shorter:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Rakefile
require 'puppetlabs_spec_helper/rake_tasks'
</code></pre></div></div>

<p>The .fixtures.yml describes the naming scheme of your module and adds additional required modules for spec testing in a sandbox.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .fixtures.yml
fixtures:
  repositories:
    stdlib: "https://github.com/puppetlabs/puppetlabs-stdlib.git"
  symlinks:
    put your class name here: "#{source_dir}"
</code></pre></div></div>

<p>The spec_helper.rb file must be located in the spec Directory and has the following content:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># spec/spec_helper.rb
require 'puppetlabs_spec_helper/module_spec_helper'
</code></pre></div></div>

<p>Next you want to test your module. We assume that the module has one class only. Put class tests inside the <code class="highlighter-rouge">spec/classes</code> directory. The test file must end with <code class="highlighter-rouge">_spec.rb</code> to allow rspec-puppet to find the test.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># spec/classes/init_spec.rb
require 'spec_helper'
describe 'put your class name here' do
  describe 'on test osfamily' do
    let(:facts) do
      { :osfamily =&gt; 'put the os you want to test here' }
    end
    context 'with default options' do
      it { is_expected.to compile.with_all_deps }
    end
  end
end
</code></pre></div></div>

<p>The second approach (one monolithic repository just needs adoption of all symlinks in the .fixtures.yml file.</p>

<p>e.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .fixtures.yml
fixtures:
  symlinks:
    my_ntp:    "#{source_dir}/modules/ntp"
    my_apache: "#{source_dir}/modules/my_apache"
    mysql:     "#{source_dir}/modules/mysql"
    ...
</code></pre></div></div>

<p>Everything else works similar.</p>

<p>Now you need to install the Gemfile extensions. First you want to ensure that you have a corresponding, <a href="https://docs.puppet.com/guides/platforms.html#ruby-versions">supported Ruby version</a> installed.
In case that the OS vendor does not offer the correct version from repositories you might want to reconcider installing ruby into your home directory by using <a href="http://rvm.io/">rvm</a> or <a href="http://rbenv.org/">rbenv</a>.</p>

<p>Switch into the repository directory where the Gemfile is located and install the extensions using bundler:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
</code></pre></div></div>

<p>Extra tip: if you dont like to mess up your ruby installation you can also specify a path where the extensions will be installed:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install --path vendor
</code></pre></div></div>

<p>Now you can run the rake task:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle exec rake spec
</code></pre></div></div>

<p>Please note that in this simple case you want to run the tests on the same os as your infrastructure. Testing on e.g. a Windows or OS X workstation requires additional fact and Puppet code mocks.</p>

<p>But how to write full tests when no time is given for this task?</p>

<p>Please check the <a href="https://github.com/nwops/puppet-retrospec">retrospec</a> tool which will parse your Puppet code and generate the tests automagically for you.</p>

<p>Martin Alfke</p>
:ET