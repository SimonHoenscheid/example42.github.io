I"c)<p><a href="http://github.com/example42/psick">PSICK</a> is an opinionated Puppet control-repo with a lot of integrations and tooling to support the Puppeteer during development, testing and operations.</p>

<p>One of the most useful integration is the one with <strong>Vagrant</strong>.</p>

<p>We can <strong>test our current local changes</strong> to Puppet code and data in several different Vagrant environments and VMs.</p>

<p>Under <code class="highlighter-rouge">vagrant/environments</code> we have various Vagrant environments, fully customisable, where Puppet can be run in agent or apply mode testing directly the effect of our changes on the repo.</p>

<p>Here we can test different Operating Systems and Puppet setups, with Puppet Enterprise (PE), OSS Puppet or The Foreman masters.</p>

<p>But first, we need to setup a few things.</p>

<h2 id="our-new-control-repo">Our new control-repo</h2>

<p>PSICK is both a control-repo by itself and a generator (at the moment very rough) of control-repos.</p>

<p>To create a control-repo for our new, wonderful, green field <strong>acme</strong> project we can:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/example42/psick
cd psick
./psick create
</code></pre></div></div>

<p>This command allows us to create a new control-repo in a new directory. It asks some questions:</p>

<ul>
  <li>
    <p>the path (absolute or relative to the dir containing psick) where we want to create it</p>
  </li>
  <li>
    <p>if we want to create a bare minimal control-repo or a full featured one, which is the exact copy of the current psick files.</p>
  </li>
  <li>
    <p>if we want to automatically make the first commit on the brand new control-repo with all the added files.</p>
  </li>
</ul>

<p>Output is something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### PSICK is going to create a brand new control-repo ###

# Specify the path where you want to create your new Puppet control-repo
Provide the full absolute path or the name of a dir that will be created under /Users/al/tmp
Press [ENTER] when done.
</code></pre></div></div>

<p><strong>acme</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Choose how you want to create your new control-repo
1- Create a full featured control-repo based on current PSICK
2- Create a minimal control-repo with only the bare minimal files
Note that you will be able to add or remove components later.
Make your choice:
</code></pre></div></div>

<p><strong>1</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Copying all files from psick to /Users/al/tmp/acme

# Initialising git in the new directory
Initialized empty Git repository in /Users/al/tmp/acme/.git/
# Showing current status of the new git repo
On branch production

Initial commit

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

        .codacy.yaml
        .gitignore
        .gitlab-ci.yml
        [...]
        vagrant/

nothing added to commit but untracked files present (use "git add" to track)
# NOTE: master branch has been renamed to production for Puppet compliance

# Do you want to make a first commit on the new repo?
Press 'y' to commit all the existing files so to have a snapshot of the current repo
Press anything else to skip this and take your time to review and cleanup files before your first commit
</code></pre></div></div>

<p><strong>y</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[production (root-commit) 1c7c6c8] First commit: Snapshot of origin     https://github.com/example42/psick (fetch) originhttps://github.com/example42/psick (push)
 607 files changed, 107764 insertions(+)
 create mode 100644 .codacy.yaml
 create mode 100644 .gitlab-ci.yml
 [...]

### Congratulations! Setup of the new control-repo finished ###
# To start to work on it: cd /Users/al/tmp/acme
# Keep updated the psick repo, and use the psick command to update or add componenent to your control-repo
</code></pre></div></div>

<p>So now we can move in the created dir, in my test case:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /Users/al/tmp/acme
git log
git status
</code></pre></div></div>

<p>and setup our control repo following the instructions.</p>

<h3 id="prerequisites-installation">Prerequisites installation</h3>

<p>If we still haven’t Puppet installed, we can install it (more or less on any Linux) with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo bin/puppet_install.sh
</code></pre></div></div>

<p>Consider that many parts of PSICK use Puppet latest features, optimal would be Puppet version 4.10 or later.</p>

<p>Remember, as is, PSICK is intended to be used for greenfield setups or migrations: we are not supposed to use it on existing Puppet control-repo, if not for inspiration, or some code or ideas grabbing.</p>

<p>Once a decent Puppet is in place, we have to deploy the modules via r10k, if not already installed, we can install it and some other useful gems with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bin/puppet_setup.sh
</code></pre></div></div>

<p>If we have <strong>r10k</strong> already installed, we can just run:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r10k puppetfile install -v
</code></pre></div></div>

<p>Setup is done, now we can start to play around. Under the <code class="highlighter-rouge">vagrant</code> directory we have most of the Vagrant related stuff.</p>

<p>We need Vagrant, Virtual Box and some plugins. We can install them all (with the option to skip single steps) with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bin/vagrant_setup.sh
</code></pre></div></div>

<p>We can install the recommended vagrant plugins with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant plugin install vagrant-cachier
vagrant plugin install vagrant-vbguest
vagrant plugin install vagrant-hostmanager
vagrant plugin install vagrant-triggers
</code></pre></div></div>

<p>And, if we want to test a Puppet Enterprise based environment (such as <code class="highlighter-rouge">pe</code>, <code class="highlighter-rouge">demo</code>, <code class="highlighter-rouge">lab</code>)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant plugin install pe_build
</code></pre></div></div>

<h2 id="time-to-play">Time to play</h2>

<p>Once Vagrant is setup with the needed dependencies, we can create some VM.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd vagrant/environments/ostest
vagrant status
</code></pre></div></div>

<p>Output here is quite interesting, note all OS work flawlessly out of the box, though.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>al@mule ostest [production] $ vagrant status Current machine states:

centos7.ostest.psick.io             not created (virtualbox)
centos6.ostest.psick.io             not created (virtualbox)
ubuntu1604.ostest.psick.io          not created (virtualbox)
ubuntu1404.ostest.psick.io          not created (virtualbox)
ubuntu1204.ostest.psick.io          not created (virtualbox)
debian8.ostest.psick.io             not created (virtualbox)
debian7.ostest.psick.io             not created (virtualbox)
suse12.ostest.psick.io              not created (virtualbox)
suse11.ostest.psick.io              not created (virtualbox)
opensuse-tumbleweed.ostest.psick.io not created (virtualbox)
opensuse-42-1.ostest.psick.io       not created (virtualbox)
alpine3.ostest.psick.io             not created (virtualbox)
fedora23.ostest.psick.io            not created (virtualbox)
cumulus.ostest.psick.io             not created (virtualbox)
windows2012-ostest                  not created (virtualbox)
windows2008-ostest                  not created (virtualbox)
</code></pre></div></div>

<p>We try a Centos 7 vm:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant up centos7.ostest.psick.io
</code></pre></div></div>

<p>The <code class="highlighter-rouge">ostest</code> environment uses <strong>puppet apply</strong> to test our local code, mounted on the selected VM.</p>

<p>Puppet run can be triggered either via a command like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant provision centos7.ostest.psick.io
</code></pre></div></div>

<p>Or, from within the VM, as root:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vagrant ssh centos7.ostest.psick.io
vm $ sudo su -
vm # /etc/puppetlabs/code/environments/production/bin/papply.sh
</code></pre></div></div>

<p>The same concept applies for other VMs and for the other environments under <code class="highlighter-rouge">vagrant/environments</code>, some of them use Puppet Enterprise or Foreman, serving directly our code to client VMs running in <strong>puppet agent</strong> mode.</p>

<p>In some cases, further steps may be required, local documentation should help.</p>

<p>Don’t expect everything to work out of the box flawlessly, combinations of OS, roles and data are many and not all tested.
Please report bugs and eventually Pull Requests on Github.</p>

<h2 id="customising">Customising</h2>

<p>The existing Vagrant environments can be customised, by editing the <code class="highlighter-rouge">config.yaml</code> file in each dir.
Give a look to <a href="https://github.com/example42/psick/blob/production/docs/vagrant.md">this document</a> for  details on how to tune the Vagrant environments.</p>

<p>Now we can enjoy our Puppet environment, start to develop and customise our control repo starting from the data in <code class="highlighter-rouge">hieradata</code>, the local code under <code class="highlighter-rouge">site</code> the external modules to add to <code class="highlighter-rouge">Puppetfile</code>, the classification logic in <code class="highlighter-rouge">manifests/site.pp</code> and <code class="highlighter-rouge">hiera.yaml</code>.</p>

<p>And, most of all, we can immediately test our code in several different systems which may emulate our infrastructure servers.</p>

<p>Alessandro Franceschi</p>
:ET