I"Ï$<p>We have already talked in this blog, about <a href="https://www.example42.com/2017/03/06/server-side-noop-mode/">server side noop mode</a> in the past, now we come back to the topic to expose how we currently prefer to use noop mode, and how to enforce no-noop mode on specific classes.</p>

<p>Puppet <strong>noop mode</strong> mode allows us to review the changes that Puppet would do on the system without actually applying them.</p>

<p>This is particularly useful when managing critical servers, as it allows to push to production Puppet code and data in a more controlled, safe and manageable way.</p>

<p>There are various ways we can enforce noop mode when using this control repo: let‚Äôs review them.</p>

<h3 id="setting-noop-from-the-client">Setting noop from the client</h3>

<p>In any Puppet installation it‚Äôs possible to run Puppet in noop mode specifying the <code class="highlighter-rouge">--noop</code> option in the command line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet agent -t --noop
</code></pre></div></div>

<p>This applies only for that specific Puppet run, so if there‚Äôs a Puppet agent service running in the background, that service will run Puppet in normal mode.</p>

<p>The noop setting can be configured and made persistent also in <code class="highlighter-rouge">puppet.conf</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[agent]
noop = true
</code></pre></div></div>

<p>If you use the <a href="https://github.com/example42/puppet-psick">PSICK module</a> you can configure it on Puppet Enterprise clients as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># We want to manage noop mode on clients:
psick::puppet::pe_agent::manage_noop: true

# We want to set noop to true
psick::puppet::pe_agent::noop_mode: true

# We enforce no-noop mode on the pe_agent class to be
# able to revert our noop settings. Details in no-noop section.
psick::puppet::pe_agent::no_noop: true
</code></pre></div></div>

<p>Note that this is the common and official approach to manage noop mode and is controlled and managed from the client, not on the server.</p>

<h3 id="setting-noop-server-side">Setting noop server-side</h3>

<p>In the <a href="https://github.com/example42/psick">PSICK control-repo</a> we use the <strong>trlinkin-noop</strong> module which provides a function called <code class="highlighter-rouge">noop()</code> which adds the noop metaparameter to each resource.</p>

<p>We use this function in <code class="highlighter-rouge">manifests/site.pp</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$noop_mode = lookup('noop_mode', Boolean, 'first', false)
if $noop_mode == true {
  noop()
}
</code></pre></div></div>

<p>This code sets the <code class="highlighter-rouge">noop_mode</code> variable via a Hiera lookup for the key <code class="highlighter-rouge">noop_mode</code>. If it‚Äôs not found on Hiera, then the default value is false.</p>

<p>If the <code class="highlighter-rouge">noop_mode</code> variable is true then noop metaparameter is added to all the resources of the catalog.</p>

<p>It‚Äôs recommended to limit the usage of noop_mode key on Hiera only when necessary, for example when a massive or invasive code change has to be promoted to production and we want a safe net where we can selectively remove noop_mode to control the propagation of change.</p>

<p>For example when pushing to production particularly critical changes it‚Äôs possible to force noop mode for all the servers adding in <code class="highlighter-rouge">hieradata/common.yaml</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>noop_mode: true
</code></pre></div></div>

<p>To test the actual changes we could override this in a Hiera yaml (something like <code class="highlighter-rouge">hieradata/env/test.yaml</code> to give you an idea) which configures a subset of our servers:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>noop_mode: false
</code></pre></div></div>

<p>Note that this is not the typical way to manage noop mode in Puppet and when using the Puppet Enterprise console you will see nodes where noop is applied with this approach undef the ‚ÄúNodes run in enforcement‚Äù group (and not in noop mode) in the dashboard. Still, checking report you will be able to notice that actually no resource is really applied and you should see eventual changes in the noop column.</p>

<p>Final result is the same (no resources are really applied) but they are shown differently on PE console.</p>

<h3 id="enforcing-no-noop-mode">Enforcing no-noop mode</h3>

<p>In some cases we might need to enforce the applications of the resources of some classes in every case, whatever is the noop mode.</p>

<p>Some of the profiles used in the PSICK module have the no_noop parameter: if set to true all the resources of the class are enforced and are applied whatever are the noop settings (either client or server side). By default no_noop is set to false and nothing changes in terms of noop management.</p>

<p>This allows us to have some server where Puppet runs in noop mode but have still some resources always applied.</p>

<p>In order to set no_noop mode for a class, use hiera data like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psick::dns::resolver::no_noop: true
psick::hostname::no_noop: true
psick::hosts::file::no_noop: true
psick::puppet::gems::no_noop: true
psick::puppet::pe_agent::no_noop: true # This is required to be able to change the noop setting client side
</code></pre></div></div>

<p>In case the no_noop parameter is not present in a profile, it‚Äôs quite easy to add it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class my_class (
  [...]
  Boolean $no_noop            = false,
) {

  if $no_noop {
    info('Forced no-noop mode.')
    noop(false)
  }
  [...]
}
</code></pre></div></div>

<h3 id="puppet-code-deployment-and-application-workflows">Puppet code deployment and application workflows</h3>

<p>Enabling noop mode on some clients, the most important ones, or the whole production ones, allows us to implement some sophisticated and safe workflows for the testing and the deployment of the Puppet code and data that manage our nodes.</p>

<p>Some basic principles have to be considered in order to design them in the most effective way:</p>

<ul>
  <li>Server side noop mode if set to true, overrides any client setting</li>
  <li>Setting a class no_noop parameter to true overrides any noop setting either client or server side</li>
  <li>We can manage via Hiera both server and client settings, giving us full flexibility on where to set it, still we should limit as much as possible the places where we configure it, and possibly, to avoid unnecessary confusion, not use, on regular basis, both server and client settings at the same time (exceptions below).</li>
  <li>Client settings are effective after the Puppet run that sets them. Server side settings are immediately effective.</li>
  <li>Always consider that classes with no_noop set to true are always applied, if you make changes to them consider the possibility to set no_noop temporarily to false, before propagating such changes everywhere.</li>
</ul>

<p>The following approach is recommended when noop mode is used or desired:</p>

<ul>
  <li>Set noop mode client side on the nodes where we want it (all production nodes or particularly critical ones)</li>
  <li>Use server side noop mode only when deploying big or potentially dangerous code/data changes, keep it undefined in normal conditions</li>
  <li>Have a CI pipeline which triggers Puppet runs on canary nodes, also in production, enforcing one-shot no-noop runs</li>
  <li>In the CI pipeline trigger noop Puppet runs on the other production nodes and verify the result</li>
  <li>Do not accumulate too many changes on noop nodes: run Puppet in no-noop mode on production servers as soon as possible (eventually do that in maintenance windows if you are particularly prudent).</li>
</ul>

<p>To trigger real no-noop Puppet runs and apply changes on nodes normally running in noop mode different approaches can be used:</p>

<ul>
  <li>At the end of the CI pipeline if everything is OK trigger (manually or automatically) a no-noop Puppet run on nodes normally in noop mode</li>
  <li>Actual execution of a no-noop run can be done via a Puppet task like <code class="highlighter-rouge">psick::puppet_agent</code> (it has a parameter for forcing it) or any other tool that can remotely execute <code class="highlighter-rouge">puppet agent -t --no-noop</code> on a node.</li>
  <li>Via PE-Console, in the Run Puppet section, manage manually the remote execution of a no-noop Puppet run by clicking on the ‚ÄúOverride noop = true configuration‚Äù.</li>
</ul>

<p>Remember that in both these last two cases, if noop is set server side Puppet keeps on skipping changes on the managed node, that‚Äôs why we suggest to use server side noop mode only to add a safe net when deploying massive, critical or potentially dangerous code and data changes.
In normal operations is probably better to use client side noop mode that can be more easily overridden.</p>

<p>Alessandro Franceschi</p>
:ET