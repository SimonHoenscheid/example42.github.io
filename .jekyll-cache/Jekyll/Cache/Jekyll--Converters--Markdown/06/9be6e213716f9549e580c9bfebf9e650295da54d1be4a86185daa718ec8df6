I"F<p>Puppet 4 has some new functionality. Within the next few blog posts I will give some examples on how to use the new functionality.
The first post covers the new Data Type system.</p>

<p>Let’s assume that you want to have a parameterized ssh class where users of your module might choose whether the server side should be installed.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ssh (
  $server = true,
){
  ...
  if $server {
    ...
  }
  ..
}
</code></pre></div></div>

<p>And now we use the module:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class { 'ssh':
  server =&gt; 'false',
}
</code></pre></div></div>

<p>In this example Puppet will verify the String ‘false’ which will result in a boolean value of ‘true’.
This is not what we expected.</p>

<p>To avoid further misuse of the module we can add Data Types:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ssh (
  Boolean $server = true,
){
  ...
  if $server {
    ...
  }
  ...
}
</code></pre></div></div>

<p>If we now use the same class declaration from above we will receive the following error message:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Expected parameter 'server' of 'Class[Ssh]' to have type Boolean, got String at ssh.pp:2 on node puppetmaster.example.net
</code></pre></div></div>

<p>What Data Types are available?</p>

<p>Puppet has Core Data Types and Abstract Data Types.</p>

<p>The Core Data Types are the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String
Integer
Float
Numeric
Boolean
Array
Hash
Regexp
Undef
Default
</code></pre></div></div>

<p>Integers are identified by a number (with or without minus sign) and no decimal point.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Integer $var1 = 1
Integer $var2 = -3 
</code></pre></div></div>

<p>Floats are identified by having a decimal point</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Float $var3 = 1.0
Float $var4 = 0.2
</code></pre></div></div>

<p>Please note that you need to provide the trailing 0</p>

<p>Most of the other Data Types explain themselves.</p>

<p>The Default Data Type is something special:</p>

<p>The Default Data Type can be used in case statements and selectors:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$real_server = $server ? {
  Boolean =&gt; $server,
  String  =&gt; str2bool($server),
  Default =&gt; true,
}
</code></pre></div></div>

<p>Besides specifying the Data Types one can also specify Ranges of validity:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ssh (
  Integer[1,1024] $listen_port = 22,
){
  ...
} 
</code></pre></div></div>

<p>This will check that $listen_port is set to an Integer value within 1 and 1024 and will fail if the boundary limits are not met.</p>

<p>The Abstract Data Types are the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Scalar
Collection
Variant
Data
Pattern
Enum
Tuple
Struct
Optional
Catalogentry
Type
Any
Callable
</code></pre></div></div>

<p>One will mostly use Abstract Types which are built upon other Data Types.</p>

<p>e.g. you want to express the Data Types of the content of an Array or an Hash:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ntp (
  Array[String] $ntp_servers = ['pool.ntp.org'],
){
  ...
}
</code></pre></div></div>

<p>A more complex example which takes a hash map:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$hash_map = {
  'ben'   =&gt; {
    uid   =&gt; 2203,
    home  =&gt; '/home/ben',
  },
  'jones' =&gt; {
    uid   =&gt; 2204,
    home  =&gt; 'home/jones',
  }
}

class usermanagement (
  Hash[String, Struct[{ uid =&gt; Integer, home =&gt; Pattern[/^\/.*/]}]] $hash
) {
  $keys = keys($hash)
  $keys.each |$single_key| {
    users::define{ $single_key:
      uid  =&gt; $hash[$single_key]['uid'],
      home =&gt; $hash[$single_key]['home'],
    }
  }
}

define users::define (
  Integer          $uid,
  Pattern[/^\/.*/] $home,
){
  notify { "User: ${title}, UID: ${uid}, HOME: ${home}": }
}

class { 'usermanagement':
  hash =&gt; $hash_map,
}
</code></pre></div></div>

<p>In case that one would like to allow certain words only, the Enum Data Type can be easily used:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ssh (
  Enum['*','::1','127.0.0.1'] $listen_ip = '*',
){
  ...
} 
</code></pre></div></div>

<p>The Optional Data Type describes parameters which can be set to undef.</p>

<p>The next posting will cover Puppet 4 functions.</p>
:ET