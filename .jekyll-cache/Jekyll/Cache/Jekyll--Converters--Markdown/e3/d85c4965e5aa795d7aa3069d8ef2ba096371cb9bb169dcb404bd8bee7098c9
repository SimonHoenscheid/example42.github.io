I"ú<p>When Puppet Inc. released hiera, we gained the possibility to separate data from code.</p>

<p>Prior hiera we used logic patterns like <code class="highlighter-rouge">if</code> and <code class="highlighter-rouge">case</code> to identify differences in our platform and configurations.
With hiera we started using the hiera lookup function to fetch data based on a hierarchy where we specify differences of our platform. This lead to cleaner, better maintainable code.</p>

<p>Now people started putting data no longer into their code, which lead to huge hiera data files and hard to maintain hierarchies.</p>

<p>The biggest problem is to identify when to put data in hiera and when to keep data in code.
Puppet did a <a href="https://puppet.com/blog/hiera-data-and-puppet-code-your-path-right-data-decisions">blog post</a> a couple of weeks ago, describing the problem and providing a workflow to identify where data should be placed.</p>

<p>I mostly agree with Garyâ€™s posting and decisions. There is just one minor issue I see with his approach: the posting does not talk about hiera data namespaces.</p>

<p>Generally you start with the question: is this data different among the platform?</p>

<p>If you must confess that data is identical anywhere you will not put this data into hiera, but keep it inside the profile:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># site/profile/manifests/login/ssh.pp
class profile::login::ssh {
  class { 'ssh':
    permit_root_login =&gt; 'no',
  }
}
</code></pre></div></div>

<p>If you must use the variable from multiple places, it is recommended to assign the data to a variable and use this variable instead:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># site/profile/manifests/data.pp
class profile::data {
  $delete_unmanaged_accounts_and_keys = true,
}


# site/profile/manifests/login/ssh.pp
class profile::login::ssh {
  include profile::data
  class { 'ssh':
    permit_root_login =&gt; 'no',
    purge_keys        =&gt; $profile::data::delete_unmanaged_accounts_and_keys,
  }
}

# site/profile/manifests/users.pp
class profile::users {
  include profile::data
  class { 'profile::users::static':
    delete_unmanaged =&gt; $profile::data::delete_unmanaged_accounts_and_keys,
  }
}
</code></pre></div></div>

<p>Next question is whether data can be calculated on a simple logic. In this case you will place the logic into the profile:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># site/profile/manifests/login/ssh.pp
class profile::login::ssh {
  include profile::data
  $case $::location {
    'dmz': {
      $manage_firewall = true
    }
    default: {
      $manage_firewall = false
    }
  }
  class { 'ssh':
    permit_root_login =&gt; 'no',
    purge_keys        =&gt; $profile::data::purge_ssh_auth_keys,
    manage_firewall   =&gt; $manage_firewall
  }
}
</code></pre></div></div>

<p>No comes the point where I differ from Garyâ€™s posting:</p>

<p>In all other cases make your profile a parametrised profile. Whether you want to specify a sane default value is up to you.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># site/profile/manifests/login/ssh.pp
class profile::login::ssh (
  Integer $port = 22,
  Array   $allow_groups,
){
  include profile::data
  $case $::location {
    'dmz': {
      $manage_firewall = true
    }
    default: {
      $manage_firewall = false
    }
  }
  class { 'ssh':
    permit_root_login =&gt; 'no',
    purge_keys        =&gt; $profile::data::purge_ssh_auth_keys,
    manage_firewall   =&gt; $manage_firewall
  }
}
</code></pre></div></div>

<p>Within hiera one can now use the profile namespace to place data:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile::login::ssh::port: 2222
profile::login::ssh::allow_groups:
  - 'admin'
  - 'backup'
</code></pre></div></div>

<p>example42 wishes everybody fun and success with Puppet and hiera.</p>

<p>Martin Alfke</p>
:ET