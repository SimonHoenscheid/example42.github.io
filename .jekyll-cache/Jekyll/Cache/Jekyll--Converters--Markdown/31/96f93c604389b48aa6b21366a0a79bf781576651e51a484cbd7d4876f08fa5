I"Ç%<p>PDK alows you to easily get unit tests for your puppet modules.</p>

<p>The Developer Kit is <a href="https://puppet.com/download-puppet-development-kit">available</a> for Linux, OS X and macOS and Windows.</p>

<ul id="markdown-toc">
  <li><a href="#what-is-inside" id="markdown-toc-what-is-inside">What is inside?</a></li>
  <li><a href="#starting-a-new-module" id="markdown-toc-starting-a-new-module">Starting a new module</a>    <ul>
      <li><a href="#generate-the-module" id="markdown-toc-generate-the-module">Generate the Module</a></li>
      <li><a href="#generate-module-content" id="markdown-toc-generate-module-content">Generate module content</a></li>
    </ul>
  </li>
  <li><a href="#using-pdk-on-existing-module" id="markdown-toc-using-pdk-on-existing-module">Using PDK on existing module</a></li>
  <li><a href="#adopting-pdk-to-your-code" id="markdown-toc-adopting-pdk-to-your-code">Adopting PDK to your code</a>    <ul>
      <li><a href="#adding-ruby-gems" id="markdown-toc-adding-ruby-gems">Adding ruby gems</a></li>
      <li><a href="#adding-your-own-code-to-spec_helper" id="markdown-toc-adding-your-own-code-to-spec_helper">Adding your own code to spec_helper</a></li>
      <li><a href="#adding-more-facts" id="markdown-toc-adding-more-facts">Adding more facts</a></li>
    </ul>
  </li>
  <li><a href="#running-individual-tests" id="markdown-toc-running-individual-tests">Running individual tests</a></li>
</ul>

<h2 id="what-is-inside">What is inside?</h2>

<p>In the PDK installation package you get some Puppet and Ruby versions installed into <code class="highlighter-rouge">/opt/puppetlabs/pdk</code>.
In version 1.5.0 you get Ruby 2.1.9 and 2.4.4 (installed into <code class="highlighter-rouge">/opt/puppetlabs/pdk/private/puppet/ruby/</code>)
Installation of Puppet versions is spread among the ruby versions. For Ruby 2.1.09 we have Puppet 4.7.1, 4.8.2, 4.9.4 and 4.10.11 (installed in <code class="highlighter-rouge">/opt/puppetlabs/pdk/private/puppet/ruby/2.1.0/gems/</code>). In Ruby 2.4.4 you find Puppet versions 5.0.1, 5.1.0, 5.2.0, 5.3.6, 5.4.0 and 5.5.1 (installed in <code class="highlighter-rouge">/opt/puppetlabs/pdk/private/puppet/ruby/2.4.0/gems/</code>)</p>

<p>Besides this git is bundled in version 2.14.2 in <code class="highlighter-rouge">/opt/puppetlabs/pdk/private/git</code>.</p>

<h2 id="starting-a-new-module">Starting a new module</h2>

<p>The Puppet Developer Kit is based on a module template. The template is bundled as a bare git repository in the installer and is located at <code class="highlighter-rouge">/opt/puppetlabs/pdk/share/cache/pdk-templates.git/</code>.</p>

<p>The module which is created by PDK uses Gemfile for installation of ruby extensions required for testing like rspec-puppet and provides CI configurations for <a href="http://travs-ci.org">travis</a> and <a href="https://docs.gitlab.com/runner/">GitLab CI runner</a>.</p>

<h3 id="generate-the-module">Generate the Module</h3>

<p>The module creation process starts with asking several questions regarding the PuppetForge account name (you donâ€™t need one, it is just a name, which is prefixed to the module name), the author name, license and supported operating systems.</p>

<p>The creation is started by running</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdk new module &lt;modulename&gt;
</code></pre></div></div>

<p>e.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdk new module demo
pdk (INFO): Creating new module: demo

We need to create the metadata.json file for this module, so we're going to ask you 4 questions.
If the question is not applicable to this module, accept the default option shown after each question. You can modify any answers at any time by manually updating the metadata.json file.

[Q 1/4] If you have a Puppet Forge username, add it here.
We can use this to upload your module to the Forge when it's complete.
--&gt; mea

[Q 2/4] Who wrote this module?
This is used to credit the module's author.
--&gt; tuxmea

[Q 3/4] What license does this module code fall under?
This should be an identifier from https://spdx.org/licenses/. Common values are "Apache-2.0", "MIT", or "proprietary".
--&gt; Apache-2.0

[Q 4/4] What operating systems does this module support?
Use the up and down keys to move between the choices, space to select and enter to continue.
--&gt; RedHat based Linux, Debian based Linux, Windows (Use arrow or number (1-7) keys, pres--&gt; RedHat based Linux, Debian based Linux, Windows

Metadata will be generated based on this information, continue? Yes
pdk (INFO): Module 'demo' generated at path '/Users/mea/Desktop/example42-blog/demo', from template 'file:///opt/puppetlabs/pdk/share/cache/pdk-templates.git'.
pdk (INFO): In your module directory, add classes with the 'pdk new class' command.
</code></pre></div></div>

<h3 id="generate-module-content">Generate module content</h3>

<p>With PDK you can create classes, defined_types and tasks. Generating providers is an experimental feature at the moment.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdk new class demo
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/manifests/init.pp' from template.
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/spec/classes/demo_spec.rb' from template.
</code></pre></div></div>

<p>This generates a Puppet class and the according basic unit test file.</p>

<p>Creating a self defined Puppet resource type is similar:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdk new defined_type demo::foo
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/manifests/foo.pp' from template.
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/spec/defines/foo_spec.rb' from template.
</code></pre></div></div>

<p>Tasks are created by running:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pdk new task run_demo
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/tasks/run_demo.sh' from template.
pdk (INFO): Creating '/Users/mea/Desktop/example42-blog/demo/tasks/run_demo.json' from template.
</code></pre></div></div>

<p>As you can see, PDK creates you a stub file using <code class="highlighter-rouge">.sh</code> extension. The JSON file is the description of the task.</p>

<h2 id="using-pdk-on-existing-module">Using PDK on existing module</h2>

<p>On your module base directory just run <code class="highlighter-rouge">pdk convert</code>. This will add all required files to your module. 
Please note that several existing files might managed by the PDK template from now on. How do you re-enable your individual settings and configurations?</p>

<h2 id="adopting-pdk-to-your-code">Adopting PDK to your code</h2>

<p>PDK manages several files and will overwrite them when running <code class="highlighter-rouge">pdk update</code>.
This is especially for <code class="highlighter-rouge">Gemfile</code>, <code class="highlighter-rouge">Rakefile</code>, <code class="highlighter-rouge">spec/spec_helper.rb</code> and <code class="highlighter-rouge">spec/default_facts.yml</code>.</p>

<p>These files are managed and owned by PDK. But how to adopt these to your specific needs?</p>

<h3 id="adding-ruby-gems">Adding ruby gems</h3>

<p>PDK does not include the hiera-eyaml gem.
If you want to run tests with eyaml, you must install the hiera-eyaml gem within PDK.
Installation of Ruby gems is done via <code class="highlighter-rouge">Gemfile</code>.
Any additional gem can be placed either in <code class="highlighter-rouge">~/.gemfile</code> or in <code class="highlighter-rouge">Gemfile.local</code>.
Please note that <code class="highlighter-rouge">Gemfile.local</code> is excluded from git in <code class="highlighter-rouge">.gitignore</code> file!</p>

<p>Another solution is to use the .sync.yml file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Gemfile:
  required:
    ':development':
      - gem: hiera-eyaml
      - gem: puppet-lint-resource_reference_syntax
      - gem: puppet-lint-trailing_comma-check
      - gem: puppet-lint-variable_contains_upcase
</code></pre></div></div>

<p>The .sync.yml file allows you to also specify additions to other files:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spec/spec_helper.rb:
  hiera_config: 'spec/fixtures/hiera.yaml'
Rakefile:
  default_disabled_lint_checks:
    - 'class_inherits_from_params_class'
</code></pre></div></div>

<h3 id="adding-your-own-code-to-spec_helper">Adding your own code to spec_helper</h3>

<p>Using sync.yml will be less optimal when you want to add lots of content to spec_helper. In this case you can use the <code class="highlighter-rouge">spec/spec_helper_local.rb</code> file instead.</p>

<h3 id="adding-more-facts">Adding more facts</h3>

<p>How to add more facts to your tests. e.g. you want to make suse of an ssh module which has an <code class="highlighter-rouge">::ssh_version</code> fact. In this case you add the additional facts to <code class="highlighter-rouge">spec/default_module_facts.yml</code> instead.</p>

<h2 id="running-individual-tests">Running individual tests</h2>

<p>PDK allows you to not only use <code class="highlighter-rouge">pdk validate</code> or <code class="highlighter-rouge">pdk test unit</code>. You also have the option to run specific pdk rake tasks: <code class="highlighter-rouge">pdk bundle exec rake -T</code> gives you the complete list of rake tasks available.</p>

<p>Happy hacking,
Martin Alfke</p>
:ET