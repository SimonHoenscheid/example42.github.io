I"c<p>Roles and profiles is an established pattern that for years has helped Puppet architects in the organization of their code base.</p>

<p>A role, and only a role, is typically assigned to a node, describing its business functionality (blog webserver, api backend, relay mail server‚Ä¶) and includes one or more profiles.</p>

<p>A profile is basically a wrapper class which may use a component module (like the ones for apache or mysql or whatever we find on the Modules Forge) and adds site specific resources: the things we need to configure servers in the way we want.</p>

<p>Over the years I found myself using slight variations on this pattern, according to use cases and context.</p>

<p>For example I find more flexible the possibility to define the profiles to use in nodes, not in ‚Äústatic‚Äù role classes, but via Hiera.</p>

<p>I consider absolutely necessary to have in my hiera‚Äôs hierarchy a layer that represents the role of the machine, and since this is already there I can use it as layer of reference where to include profiles.</p>

<p>The Puppet code needed to define in Hiera the profiles to use is quite straightforward:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hiera_include('profiles', [])
</code></pre></div></div>

<p>The hiera_include function looks for an array and includes as classes all the elements of the array.</p>

<p>Starting from Puppet 4.9 Hiera functions in Puppet DSL are deprecated, so the above code can be written with:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$profiles = lookup({
  name          =&gt; 'profiles',
  merge         =&gt; 'unique',
  default_value =&gt; [],
  value_type    =&gt; Array[String],
})
$profiles.each | $p | {
  contain $p
}
</code></pre></div></div>

<p>This alternative may look more complex but it‚Äôs actually much more powerful. Check <a href="https://www.devco.net/archives/2016/03/13/the-puppet-4-lookup-function.php">this</a> blog post for R.I.Pienaar for more details.</p>

<p>For a smarter alternative of the above, you can simply have something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  lookup('profiles', Array[String], 'unique').contain
</code></pre></div></div>

<p>One of the benefit in defining what profiles to include via Hiera is that we have much more flexibility on where to include them.</p>

<p>We can set them at the role‚Äôs hierarchy level but we can also set them at other levels, for example managing per node exceptions.</p>

<p>So, in my latest control-repos I don‚Äôt have a role module where I define my role classes, as everything is managed via Hiera, but I have another kind of site module: <strong>tools</strong>.</p>

<p>The tools module is usually coupled with the profile one and basically contains defines which are used by the profile classes.</p>

<p>The basic idea is that tools contains local facts, functions, data types, defines, types and providers which are not provided by a dedicated module and which serve us for our own purposes, be they very specific or somehow common.</p>

<p>An example of a tools module is in example42‚Äôs <a href="https://github.com/example42/psick">PSICK</a>, a rather complete control-repo, here, since we make a large use of Tiny Puppet which saves us from the need of importing several external modules, we place various defined for common (and not so common) purposes.</p>

<p>Some of them should actually stay in dedicated modules, along with the relevant profiles classes, but our control-repo is somehow opinionated and has its own rules ;-)</p>

<p>Alessandro Franceschi</p>
:ET