I"Þ<p>Modulesâ€™ documentation is useful to understand what a module does and how it does it and how to make use of it. Usually we can access these information by reading the README, directly on the Forge or GitHub page, and eventually looking directly at the inline documentation in manifests.</p>

<h3 id="puppet-strings">Puppet Strings</h3>

<p>As you are probably aware there is a tool, <a href="https://github.com/puppetlabs/puppet-strings"><strong>Puppet strings</strong></a> which is able to automatically generate documentation for a module based on in code documentation.</p>

<p>Itâ€™s based on the <a href="http://yardoc.org/">Yard</a> tool and can generate docs in various formats.</p>

<p>To install Puppet strings:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet resource package rgen provider=puppet_gem
puppet resource package puppet-strings provider=puppet_gem
</code></pre></div></div>

<p>To generate the documentation for a module, move inside the module main directory and run:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/puppetlabs/puppet/bin/puppet strings generate **/*{.pp\,.rb} **/**/*{.pp\,.rb}
</code></pre></div></div>

<p>This will parse all the .rb and .pp files in the module and generate html documentation under the <code class="highlighter-rouge">doc</code> directory of the module.</p>

<h3 id="puppet-documentation-server">Puppet documentation server</h3>

<p>Instead of running the <code class="highlighter-rouge">puppet strings</code> command on every change in every module, it is also possible to have the strings server checking for changes and rendering documentation upon file changes.</p>

<p>Just change to your control repository, install all modules from Puppetfile by running <code class="highlighter-rouge">r10k puppetfile install</code> and run the strings server:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/puppetlabs/puppet/bin/puppet strings server --modulepath=./modules:./site
</code></pre></div></div>

<p>This will spin up a webservice which is accessible on port 8808: <code class="highlighter-rouge">http://localhost:8808</code></p>

<p>We recommend to <strong>not</strong> have this web server running on the puppet master. Spin up a new server which will get code updates via git hooks or CI pipelines.</p>

<h3 id="puppetmoduleinfo">puppetmodule.info</h3>

<p>As we know now, Yard can act as a server and show directly the html pages generated. Thereâ€™s a web site which relies on this and show Puppet strings based documentation for most of the Puppet public modules on the Forge and GitLab.</p>

<p>Give a visit to <a href="http://www.puppetmodule.info">www.puppetmodule.info</a>, site created by Dominic Cleal from The Foreman team.</p>

<p>Here you can see the documentation for virtually any module you will find yourself using, the site is able to generate on request the documentation for modules it hasnâ€™t yet processed.</p>

<p>So on this site you can look how documented modules <a href="http://www.puppetmodule.info/modules/example42-psick">appear</a> and search modules and contents as needed.</p>

<h3 id="control-repo-documentation">Control repo documentation</h3>

<p>In <a href="https://github.com/example42/psick">Psick</a> we use Puppet strings also to generate the documentation of the whole control-repo.</p>

<p><a href="http://puppet.pages.lab.psick.io/psick/">This</a> is Psickâ€™s puppet strings generated documentation (it includes README with merged texts from the psick control-repo and the classes and defines from the psick module). It is automatically generated during the CI pipeline we run on GitLab, relevant lines are <a href="https://github.com/example42/psick/blob/production/.gitlab-ci.yml#L251">here</a>.</p>

<p>As they say: itâ€™s not ready until itâ€™s documented.</p>

<h3 id="how-to-use-puppet-strings-in-your-puppet-code">How to use puppet strings in your puppet code?</h3>

<p>Every class and define must start with the documentation prior class or define definition. Documentation is marked as comments using the hash character (#).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># The demo setup class
#
# This is an example of using documentation in a class or define
#
# @summary this is rendered as summary of the class or define
#
# @example Show how people can make use of the class
#   include demo_setup
#
# @param prod [Boolean] This parameter describes the stage or maturity level
#   of the application. This text is longer, so we use newline for
#   readability
# @param port [Integer] Port on which the demo_setup must run
#
class demo_setup (
  Boolean $prod = true,
  Integer $port = 1025,
){
  # Puppet code
}
</code></pre></div></div>

<p>Strings can also render documentation from types and providers:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Puppet::Type.newtype(:demo_setup) do
  desc &lt;&lt;-DESC
The type for the demo_setup
@example Show usage for the type
  demo_setup { 'application':
    prod =&gt; true,
    port =&gt; 8880,
  }
DESC

  newparam(:prod) do
    desc 'Stage to run in'
    # ...
  end
end
</code></pre></div></div>

<p>Alessandro Franceschi
Martin Alfke</p>
:ET