I"ã<p><a href="https://www.github.com/example42/puppet-tp">Tiny Puppet</a> if a Puppet module that provides general defines to manage any application on any operatingsystem, using the data present in the companion <a href="https://www.github.com/example42/tinypuppet">Tiny Data</a> module.</p>

<ul id="markdown-toc">
  <li><a href="#core-defines" id="markdown-toc-core-defines">Core defines</a></li>
  <li><a href="#tiny-puppet-on-the-command-line" id="markdown-toc-tiny-puppet-on-the-command-line">Tiny Puppet on the command line</a></li>
</ul>

<h2 id="core-defines">Core defines</h2>

<p>The user defined resource <code class="highlighter-rouge">tp::install</code> can be used to install an application package and itâ€™s service, if the relevant hieradata it also takes care of managing its repository data via the <code class="highlighter-rouge">tp::repo</code> define (either via a release package or directly configuring the repository data).</p>

<p>With <code class="highlighter-rouge">tp::conf</code> itâ€™s possible to configure an application configuration files using different formats and methods. With <code class="highlighter-rouge">tp::dir</code> whole directories can be managed, also with a source on a scm repo like git, mercurial and subversion.</p>

<p>Finally with <code class="highlighter-rouge">tp::test</code> is possible to define any test script that checks if the relevant application is correctly working.</p>

<p>These are defines which we can use in your classes and profiles to manage applications without the need of a dedicated module, but Tiny Puppet also offer a command line interface, which is easy to use and powerful.</p>

<h2 id="tiny-puppet-on-the-command-line">Tiny Puppet on the command line</h2>

<p>We can install Tiny Puppet on any system where Puppet is installed, just run, as root:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppet module install example42-tp
puppet tp setup
</code></pre></div></div>

<p>Now you can use Tiny Puppet from the command line:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@lab ~]# tp

Usage: tp &lt;action&gt; [app]

Available actions:
install: Install the given app with tp (relevant tinydata must be available)
uninstall: Uninstall the given application with tp
test: Test if the given (or all) application is correctly working
log: Tail the logs of the given (or all) application (CTRL+C to exit)
list: List ALL the applications installable with tp

Applications installed via tp (available for tp test and log actions):
openssh
nginx
ruby-dev
ntpdate
epel
sysdig
make
ruby
rsyslog
virtualbox
dkms
</code></pre></div></div>

<p>The command shows the available actions and the list of applications that have been installed locally via tp.</p>

<p>Via tp on the cli you can install or uninstall packages or repos.</p>

<p>For example top install epel Repository on Redhat distributions itâ€™s enough to write:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tp install repo
</code></pre></div></div>

<p>To install virtualbox with relevant repositories:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tp install virtualbox
</code></pre></div></div>

<p>To list all the available applications:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tp list
</code></pre></div></div>

<p>But, more useful than anything else, to test if applications are correctly working:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@lab ~]# tp test
- openssh: package openssh-server OK
- openssh: service sshd OK
- nginx: package nginx OK
- nginx: service nginx OK
- ruby-dev: package ruby-devel OK
- ntpdate: package ntpdate OK
- sysdig: package sysdig OK
- make: package make OK
- ruby: package ruby OK
- rsyslog: package rsyslog OK
- rsyslog: service rsyslog OK
- virtualbox: package VirtualBox-5.1 OK
- virtualbox: service vboxdrv OK
- dkms: package dkms OK
- dkms: service dkms OK
</code></pre></div></div>

<p>The exit code of the command is 0 if everything is OK, otherwise itâ€™s 1. You can you <code class="highlighter-rouge">tp test</code> in multiple places, for example in integration tests or canary runs during a CI pipeline to test if all the applications are locally working correctly.</p>

<p>Finally itâ€™s useful  to use <code class="highlighter-rouge">tp log</code> to open in tail all the logs of all the applications installed via tp.</p>

<p>Itâ€™s possible to specify an application name to just just its logs: <code class="highlighter-rouge">tp log nginx</code>.</p>

<p>Needless to say that all the involved paths of logs, configuration files or names of packages and services are automatically detected for different OS: so using <code class="highlighter-rouge">tp</code> commands or defines we can refer to the generic application name without the need of knowing anything on how that is managed on the system.</p>

<p>Alessandro Franceschi</p>
:ET