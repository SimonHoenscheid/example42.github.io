I"¦<p>This is the <strong>first</strong> of <strong>four</strong> post series for our call for Tiny Data.</p>

<p>But first, letâ€™s talk about <strong>what uses Tiny Data</strong>:</p>

<h3 id="tiny-puppet-tp">Tiny Puppet (tp)</h3>

<p>If you know something about example42, you should know that we developed <a href="https://github.com/example42/puppet-tp" target="_blank">Tiny Puppet</a> (tp), a Puppet module which allows to manage potentially <strong>any application</strong> on any <strong>Operating System</strong>.</p>

<p>What exactly, currently Tiny Puppet can manage?</p>

<p><strong>Any application</strong> that can be installed via a Puppet <strong>package</strong> resource.</p>

<p>On What Operating Systems?</p>

<ul>
  <li>Mostly <strong>Linux</strong> (RedHat, Debian, Suse and derivatives)</li>
  <li>But also <strong>Solaris</strong>, <strong>BSDs</strong> and <strong>Darwin</strong> (with brew-cask)</li>
  <li>And potentially also <strong>Windows</strong> (with Chocolatey).</li>
</ul>

<p>What you can use it for?</p>

<ul>
  <li>Shell usage: Use the <code class="highlighter-rouge">tp</code> command to quickly install, test, show logs of the managed applications</li>
  <li>Puppet manifests usage: Use <code class="highlighter-rouge">tp::install', </code>tp::dir<code class="highlighter-rouge"> and </code>tp::conf` defines to manage applications installation and configuration in:
    <ul>
      <li>Local site profiles, with our code, our files configured with our logic</li>
      <li>Possibly, optionally, in component modules, to benefit of tp cli integrations</li>
      <li>Ready for Hiera use profiles collections, like the <a href="https://github.com/example42/puppet-tp_profile">tp-profile</a> or the <a href="https://github.com/example42/puppet-psick">psick module</a></li>
    </ul>
  </li>
</ul>

<p>Just to give you an idea, the following code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class profile::openssh (
  String $template = 'profile/openssh/sshd_config.erb',
  Hash $options    = {},
) {

  tp::install { 'openssh': }
  tp::conf { 'openssh':
    template     =&gt; $template,
    options_hash =&gt; $options,
  }
  # Alternative which does the same:
  # tp::conf { 'openssh':
  #   content =&gt; template($template),
  # }      
}
</code></pre></div></div>

<p>will install the package, configure the file with the contents we want, manage the service (taking care of dependencies and different names and paths) for openssh.</p>

<p>The example used here for openssh can be done <strong>virtually for all applications you can think about</strong> (for which thereâ€™s a package to install and the right tinydata).</p>

<p>This can be useful when <strong>we know how to configure our application</strong>, and we want a quick way to puppettize it without getting lost in finding the right component modules with its bunch of dependencies, in a way the allows us to concentrate just on the data to customise, which, for the above example, could be Hiera data as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile::openssh::template: profile/openssh/sshd_config.erb
profile::openssh::options:
  Protocol: 2
  PermitRootLogin: 'no'
  UsePAM: 'yes'
  TCPKeepAlive: 'yes'
</code></pre></div></div>

<p>Content of the template, to be placed in our profile module, could be something like what follows (plus all the necessary extra settings we may want to hard-code):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># File managed by Puppet
&lt;% @options.each do |k,v| -%&gt;
&lt;%= k %&gt; &lt;%= v %&gt;
&lt;% end -%&gt;
</code></pre></div></div>

<h3 id="request-for-tiny-data">Request for Tiny Data</h3>

<p>So, is there any app you would like to be managed via Tiny Puppet?</p>

<p><strong>Let us know</strong>, in any way (tweet, comment, email, voiceâ€¦).</p>

<p>We will <strong>give an example42 answer</strong>.</p>
:ET