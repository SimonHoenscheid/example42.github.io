I"i8<p>This week’s tip of the day deals with management of custom applications with Puppet and Tiny Puppet.</p>

<p>Usually developers prefer to concentrate on their application development and not also write Puppet modules for its deployment and configuration.</p>

<p>Especially when it comes to individual, in-house developed software you will find no Puppet module available, so a custom profile or module has to be written.</p>

<p>In this post we are going to show how we can easily manage custom applications with Tiny Puppet with limited or no Puppet code at all.</p>

<ul id="markdown-toc">
  <li><a href="#application-deployment-using-modules" id="markdown-toc-application-deployment-using-modules">Application deployment using modules</a></li>
  <li><a href="#application-deployment-using-a-tiny-puppet-profile" id="markdown-toc-application-deployment-using-a-tiny-puppet-profile">Application deployment using a Tiny Puppet profile</a></li>
  <li><a href="#application-deployment-using-a-tiny-puppet-wrapper-define" id="markdown-toc-application-deployment-using-a-tiny-puppet-wrapper-define">Application deployment using a Tiny Puppet wrapper define</a></li>
  <li><a href="#application-deployment-using-tiny-puppet-and-custom-tinydata" id="markdown-toc-application-deployment-using-tiny-puppet-and-custom-tinydata">Application deployment using Tiny Puppet and custom Tinydata</a></li>
  <li><a href="#advantages" id="markdown-toc-advantages">Advantages?</a></li>
</ul>

<h2 id="application-deployment-using-modules">Application deployment using modules</h2>

<p>Individual applications need individual modules or profiles.</p>

<p>Developers know about possible configuration flags (e.g. db connectors or feature flags) and how and where to set specific configurations.</p>

<p>They will start with the installation (hopefully <code class="highlighter-rouge">package</code> resource type) and then use the <code class="highlighter-rouge">file</code> resource to configure settings. Afterwards they use the <code class="highlighter-rouge">service</code> resource to ensure that the application is running.</p>

<p>e.g.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">class</span> <span class="n">my_application</span> <span class="p">(</span>
  <span class="k">String</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">$</span><span class="k">version</span><span class="p">,</span>
  <span class="k">String</span><span class="p">[</span><span class="m">4</span><span class="p">]</span> <span class="p">$</span><span class="n">admin_password</span><span class="p">,</span>
  <span class="k">Boolean</span>   <span class="p">$</span><span class="n">enable_feature_432</span> <span class="p">=&gt;</span> <span class="nb">false</span><span class="p">,</span>
  <span class="k">Boolean</span>   <span class="p">$</span><span class="n">enable_feature_876</span> <span class="p">=&gt;</span> <span class="nb">true</span><span class="p">,</span>
<span class="p">){</span>
  <span class="k">package</span> <span class="p">{</span> <span class="s1">'my_application'</span><span class="p">:</span>
    <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="p">$</span><span class="k">version</span><span class="p">,</span>
  <span class="p">}</span>
  <span class="n">file</span> <span class="p">{</span><span class="err"> </span><span class="s1">'/etc/application/app.conf'</span><span class="p">:</span>
    <span class="n">ensure</span>  <span class="p">=&gt;</span> <span class="n">file</span><span class="p">,</span>
    <span class="n">content</span> <span class="p">=&gt;</span> <span class="n">template</span><span class="p">(</span><span class="s1">'my_application/app.conf.erb'</span><span class="p">),</span>
    <span class="n">notify</span>  <span class="p">=&gt;</span> <span class="n">Service</span><span class="p">[</span><span class="s1">'my_application'</span><span class="p">],</span>
    <span class="n">require</span> <span class="p">=&gt;</span> <span class="k">Package</span><span class="p">[</span><span class="s1">'my_application'</span><span class="p">],</span>
  <span class="p">}</span>
  <span class="n">file</span> <span class="p">{</span><span class="err"> </span><span class="s1">'/etc/application/secrets'</span><span class="p">:</span>
    <span class="n">ensure</span>  <span class="p">=&gt;</span> <span class="n">file</span><span class="p">,</span>
    <span class="n">content</span> <span class="p">=&gt;</span> <span class="s2">"admin:${admin_password}"</span><span class="p">,</span>
    <span class="n">notify</span>  <span class="p">=&gt;</span> <span class="p">[</span><span class="s1">'my_application'</span><span class="p">],</span>
    <span class="n">require</span> <span class="p">=&gt;</span> <span class="k">Package</span><span class="p">[</span><span class="s1">'my_application'</span><span class="p">],</span>
  <span class="p">}</span>
  <span class="n">service</span> <span class="p">{</span> <span class="s1">'my_application'</span><span class="p">:</span>
    <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">running</span><span class="p">,</span>
    <span class="n">enable</span> <span class="p">=&gt;</span> <span class="nb">true</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If multi OS support is needed, the module can get a lot more complex, with a params class or data in module to cope with different paths and names.</p>

<p>Moreover you may need to add fragments of code for each managed file and manage the relevant dependencies.</p>

<p>All code must be inside either a module or a profile and needs unit and acceptance testing.</p>

<p>When you have multiple applications you will have multiple classes for each of your applications.</p>

<p>Hopefully, finally, your application modules do not interfere with any other module which might lead to duplicate resource type declarations.</p>

<h2 id="application-deployment-using-a-tiny-puppet-profile">Application deployment using a Tiny Puppet profile</h2>

<p>Within Tiny Puppet you don’t have to bother with developing Puppet code.</p>

<p>Tiny Puppet is an abstraction layer for any application deployment and can fully controllable by hiera data.</p>

<p>Let’s migrate the above Puppet code to a profile with Tiny Puppet defines. First we generate a wrapper class (profile), which can be used by all applications:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class profile::my_application (
  String[4] $admin_password  = '',      
  Hash      $install_options = {},
  Hash      $conf_options    = {},
){
  if ! empty($install_options) {
    tp::install { 'my_application':
      * =&gt; $install_options,  
    }
  }
  if ! empty($conf_options) {
    tp::conf { 'my_application':
      * =&gt; $conf_options,
    }
  }
  if !empty($admin_password) {
    tp::conf { 'my_application::secrets':
      content =&gt; "admin:${admin_password}",
    }
  }
}
</code></pre></div></div>

<p>Now we can add the required data to hiera:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile::my_application::admin_password: ENC[...] # encrypted data
profile::my_application::install_options:
  ensure: '1.1.3'
profile::my_application::conf_options:
  path: '/etc/application/app.conf'
  template: 'profile/my_application/conf.erb'
  options_hash:
    master: appmaster.prod.mydomain
    listen: 0.0.0.0
</code></pre></div></div>

<p>In the conf.erb template we can refer to our application configuration options with something like: <code class="highlighter-rouge">master = &lt;%= @options_hash['master'] %&gt;</code>.</p>

<h2 id="application-deployment-using-a-tiny-puppet-wrapper-define">Application deployment using a Tiny Puppet wrapper define</h2>

<p>An alternative to the above example, where a profile class is created for each application, can be to write a custom generic wrapper define where the tp::install and tp::conf defines are declared, and a simple class that allows to configure via Hiera data any application.</p>

<p>The generic wrapper could be something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>define profile::application (
  Hash      $tp_options_hash = {},
){
  if has_key($tp_options_hash, 'install') {
    tp::install { $title:
      * =&gt; $tp_options_hash['install'],  
    }
  }
  if has_key($tp_options_hash, 'conf') {
    tp::conf { $title:
      * =&gt; $tp_options_hash['conf'],
    }
  }
}
</code></pre></div></div>

<p>The class that exposes a parameter to configure the profile::application defines could be as simple as:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class profile (
  Hash $applications = {},
) {

  $applications.each |$k,$v| {
    profile::application { $k:
      * =&gt; $v,
    }
  }
}
</code></pre></div></div>

<p>This is the only code we would need to write for any application, then we can feed it with data like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile::applications:
  my_application:
    install:
      ensure: '1.1.3'
    conf:
      path: '/etc/application/app.conf'
      template: 'profile/my_application/conf.epp'
</code></pre></div></div>

<p>Now any development team just provides a set of YAML data for their application based on a custom template where we can parametrise what we need to change in different environments or servers.</p>

<h2 id="application-deployment-using-tiny-puppet-and-custom-tinydata">Application deployment using Tiny Puppet and custom Tinydata</h2>

<p>We can be even smarter and create tinydata (the data used by Tiny Puppet) specific for our application, in a custom data module, with custom hierarchy for each application we want to manage (in case we want support for multiple OS):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi my_tinydata/data/my_application/hiera.yaml

---
:hierarchy:
  - "%{title}/osfamily/%{osfamily}"
  - "%{title}/default"
  - default
</code></pre></div></div>

<p>We need a generic (valid for all applications) data/default.yaml which can have the same contents of the <a href="https://github.com/example42/tinydata/blob/master/data/default.yaml">tinydaya default</a>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi my_tinydata/data/default.yaml
</code></pre></div></div>

<p>Now we need to create at least a file with application specific data, let’s just create the default file, valid for all OS:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi my_tinydata/data/my_application/default.yaml
</code></pre></div></div>

<p>Content might look like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
my_application::settings:
  package_name: 'my_application'
  service_name: 'my_application'
  config_file_path: '/etc/my_application/app.conf'
  config_dir_path: '/etc/my_application'
</code></pre></div></div>

<p>These are the minimal settings for having a typical package/service/config file setup, but we can add more options such as:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  # Used by tp log command, can be an array
  log_file_path: '/var/log/my_application.log'

  # Optional argument to launch service in forground (useful inside Docker containers)
  nodaemon_args: '-D'

  # Optional command to check the syntax of the application configuration before restarting my_application service
  validate_cmd: 'my_application -t -f %'

  # Optional Url of the release package which configures my_application Yum/Apt repo (if no release package is available the repo settings can be set via other keys in tinydata)
  repo_package_url: 'https://repo.mydomain/my_application/my_application-release-el-7.noarch.rpm'
</code></pre></div></div>

<p>Given tinydata like this we can configure our application without writing a single line of code. We can just include the <code class="highlighter-rouge">tp</code> class (here needed just to expose Hiera configurable parameters to manage tp defines, the same can be accomplished with a custom class similar to the profile example before) and write Hiera data like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tp::install_hash:
  my_application:
    ensure: '1.1.3'
    data_module: my_tinydata
tp::conf_hash:
  my_application:
    template: 'profile/my_application/conf.erb'
    options_hash:
      master: appmaster.prod.mydomain
      listen: 0.0.0.0
    data_module: my_tinydata
  my_application::secrets:
    content: ENC[...] # Hiera-eyaml encrypted content
    data_module: my_tinydata
</code></pre></div></div>

<p>The default value for the data_module parameter is ‘tinydata’, and for this reason the tp module has  <a href="https://github.com/example42/tinydata">example42-tinydata</a> as dependency.</p>

<p>Still the data_module can be configured, so we can have a custom local module (here my_tinydata) where we add our own applications data.</p>

<p>Alternatively we could just form the tinydata module and add our applications data to our local version of the module.</p>

<h2 id="advantages">Advantages?</h2>

<p>When it’s worth using tp instead of writing a custom module?</p>

<ul>
  <li>When we want to reduce the amount of custom Puppet code to write and prefer a totally data driven management of applications</li>
  <li>When we need to manage packages, services, configuration files (tp takes care of relationships)</li>
  <li>When we might benefit for a command like <code class="highlighter-rouge">tp test</code>, which can be executed locally on the system, via a monitoring, remote execution or orchestration tool to quickly and automatically get the status of all the applications managed by tp</li>
  <li>When we want a quick and standardised way to troubleshoot applications, using the <code class="highlighter-rouge">tp log</code> command to tail all the logs of the applications we manage.</li>
</ul>

<p>We wish everybody fun and success with Tiny Puppet,</p>

<p>Martin Alfke
Alessandro Franceschi</p>
:ET