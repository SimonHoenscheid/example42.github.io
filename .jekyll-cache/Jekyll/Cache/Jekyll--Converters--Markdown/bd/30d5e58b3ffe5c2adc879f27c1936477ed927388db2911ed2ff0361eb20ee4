I"­/<p>Yes, we know, there is a famous Puppet cheat sheet available at docs.puppet.com</p>

<p>This is my personal collection of different Puppet DSL items, which I usually generate at each official Puppet Fundamentals training.
Now I found the time to paste them into a blog posting and add information on code logic and hiera.</p>

<h3 id="puppet-dsl">Puppet DSL</h3>

<h4 id="resource-type-declaration">Resource type declaration:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type { 'title':
  param =&gt; 'value',
}
</code></pre></div></div>

<h4 id="class-definition">Class definition:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class &lt;name&gt; (
  DataType $param1,           # this parameter must be provided upon declaration
  DataType $param2 = 'value',
) {
  # Puppet DSL code
}
</code></pre></div></div>

<h4 id="class-declaration-using-a-function">Class declaration using a function:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include &lt;name&gt;  # no ordering, the mentioned class will be somewhere in the catalog
require &lt;name&gt;  # strict ordering, the class must be finished prior continuing
contain &lt;name&gt;  # local ordering, the class must be finished within the class where the contain function is used
</code></pre></div></div>

<h4 id="class-declaration-using-class-as-resource-type">Class declaration using class as resource type:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class { '&lt;name&gt;':
  param1 =&gt; 'value',
}
</code></pre></div></div>

<h4 id="self-defined-resource-type-definition">Self defined resource type definition:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>define &lt;name&gt; (
  DataType $param1,
  DataType $param2 = 'value',
){
  # Puppet DSL
  # all resource type declaration must use the $title variable
  # older Puppet code uses $name instead of $title
}
</code></pre></div></div>

<h4 id="self-defined-resource-type-declaration">Self defined resource type declaration:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;name&gt; { 'title':
  param1 =&gt; 'value',
}
</code></pre></div></div>

<h3 id="puppet-dsl-code-logic">Puppet DSL code logic</h3>

<h4 id="case-statement">Case statement:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>case $test_variable {
  'value1': {         # specific value
    # Puppet DSL
  }
  /regexp/: {         # regular expression
    # Puppet DSL
  }
  'value2', 'value3': {  # multiple values
    # Puppet DSL
  }
  default: {          # fall back value - optional
    # optional, Puppet DSL
  }
}
</code></pre></div></div>

<h4 id="if-statement">If statement:</h4>

<p>Variant 1: Boolean or existing variable:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if $test_variable {
  # Puppet DSL
} else {  # else is optional
  # Puppet DSL
}
</code></pre></div></div>

<p>Variant 2: test content of variable:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if $test_variable == 'content' {
  # Puppet DSL
}
</code></pre></div></div>

<p>Variant 3: test content on regular expression:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if $test_variable =~ /regexp/ {
  # Puppet DSL
}
</code></pre></div></div>

<h4 id="selector">Selector:</h4>

<p>Please use selectors sparsely as they very fast lead to hard to read Puppet code!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$result_var = $test_var ? {
  'value1' =&gt; 'return_val1',
  'value2' =&gt; 'return_val2',
  default  =&gt; 'return_val3',
}
</code></pre></div></div>

<h3 id="puppet-dsl-lambda-functions">Puppet DSL lambda functions</h3>

<h4 id="iterating-over-an-array">Iterating over an array:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$var = [ 'element1', 'element2' ]
$var.each |DataType $key| {
  type { $key:
    param =&gt; 'value',
  }
}
</code></pre></div></div>

<h4 id="iterating-over-a-hash">Iterating over a hash:</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$var = {
  'key1' =&gt; {
    'var1' =&gt; 'val1',
    'var2' =&gt; 'val2',
  },
  'key2' =&gt; {
    'var1' =&gt; 'val1',
  },
}

$var.each |DataType $key, DataType $val| {
  type { $key:
    * =&gt; $val,
}
</code></pre></div></div>

<h3 id="puppet-and-hiera-5">Puppet and Hiera 5</h3>

<h4 id="explicit-lookup">Explicit lookup</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class foo {
  $data = lookup('key', DataType, &lt;merge behavior&gt;, &lt;default value&gt;)
}
</code></pre></div></div>

<p>DataType, â€˜merge behaviorâ€™ and â€˜default valueâ€™ are optional</p>

<p>merge behavior:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'first'   # returns the first occurrence of 'key'
'unique'  # returns an array of all occurrences of 'key' with duplicates removed
'hash'    # returns a hash of all occurrences of 'key', duplicates hash keys are taken from highest priority
'deep'    # returns a hash of all occurrences of 'key', duplicate hash keys are merged
</code></pre></div></div>

<h4 id="automatic-data-lookup">Automatic data lookup</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class foo (
  DataType $data = 'value' # identical to $data = lookup('foo::data', DataType, 'first', 'value')
) {
}
</code></pre></div></div>

<p>Puppet will automatically query hiera for the key <code class="highlighter-rouge">'foo::data'</code></p>

<h3 id="puppet-and-resource-ordering">Puppet and Resource ordering</h3>

<h4 id="ordering-with-meta-parameters">Ordering with meta parameters</h4>

<p>Variant 1: require and subscribe</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">present</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">file</span> <span class="p">{</span> <span class="s1">'/etc/foo/foo.conf'</span><span class="p">:</span>
  <span class="n">ensure</span>  <span class="p">=&gt;</span> <span class="n">file</span><span class="p">,</span>
  <span class="n">require</span> <span class="p">=&gt;</span> <span class="k">Package</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">],</span>
<span class="p">}</span>
<span class="n">service</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span>    <span class="p">=&gt;</span> <span class="n">running</span><span class="p">,</span>
  <span class="n">subscribe</span> <span class="p">=&gt;</span> <span class="n">File</span><span class="p">[</span><span class="s1">'/etc/foo/foo.conf'</span><span class="p">].</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Variant 2: before and notify</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">present</span><span class="p">,</span>
  <span class="n">before</span> <span class="p">=:</span> <span class="n">File</span><span class="p">[</span><span class="s1">'/etc/foo/foo.conf'</span><span class="p">],</span>
<span class="p">}</span>
<span class="n">file</span> <span class="p">{</span> <span class="s1">'/etc/foo/foo.conf'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">file</span><span class="p">,</span>
  <span class="n">notify</span> <span class="p">=&gt;</span> <span class="n">Service</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">],</span>
<span class="p">}</span>
<span class="n">service</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">running</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Variant 3: resource chaining</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">present</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">file</span> <span class="p">{</span> <span class="s1">'/etc/foo/foo.conf'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">file</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">service</span> <span class="p">{</span> <span class="s1">'foo'</span><span class="p">:</span>
  <span class="n">ensure</span> <span class="p">=&gt;</span> <span class="n">running</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">Package</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">]</span> <span class="p">-&gt;</span> <span class="n">File</span><span class="p">[</span><span class="s1">'/etc/foo/foo.conf'</span><span class="p">]</span> <span class="p">~&gt;</span> <span class="n">Service</span><span class="p">[</span><span class="s1">'foo'</span><span class="p">]</span>
</code></pre></div></div>

<p>or multiline:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Package['foo']
-&gt; File['/etc/foo/foo.conf']
~&gt; Service['foo']
</code></pre></div></div>

<h3 id="puppet-module">Puppet Module</h3>

<p>A module is a directory structure inside the <code class="highlighter-rouge">$modulepath</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;modulepath&gt;/
  \- &lt;modulename&gt;
       |- manifests/
       |    |- init.pp                  # main class definition: class &lt;modulename&gt; { ... }
       |    |- subclass.pp              # subclass definition: class &lt;modulename&gt;::subclass { ... }
       |    \- folder/
       |        \- subclass.pp          # subclass in directory definition: class &lt;modulename&gt;::folder::subclass { ... }
       |- files/
       |    \- staticfile.conf          # static file: source =&gt; 'puppet:///modules/&lt;modulename&gt;/staticfile.conf',
       |- templates/
       |    \- dynamic_config_file.epp  # templated config file: content =&gt; epp('&lt;modulename&gt;/dynamic_config_file.epp'),
       |- facts.d/
       |    \- external_facts.yaml      # plugin synced
       |- types/
       |    \- datatype.pp              # type &lt;modulename&gt;::datatype { ... }
       |- functions/
       |    \- puppetfunction.pp        # function &lt;modulename&gt;::puppetfunction { ... }
       |- lib/
       |    |- facter/
       |    |    \- custom_fact.rb      # $facts['custom_fact']
       |    \- puppet/
       |        |- functions/
       |        |    \- &lt;modulename&gt;/
       |        |         \- puppet4function.rb  #  Puppet::Functions.create(':&lt;modulename&gt;/puppet4function) do ... end
       |        |- parser/
       |        |    \- functions/
       |        |        \- puppetfunction.rb   # legacy functions - avoid : module Puppet::Parser::Functions.newfunction(':puppetfunction) do ... end
       |        |- type/
       |        |    \- custom_type.rb          # Puppet::Type.newtype(:custom_type) do ... end
       |        \- provider/
       |             \- custom_type/
       |                 \- custom_provider.rb  # Puppet::Type.type(:custom_type).provider(:custom_provider) do ... end
       \- spec/
</code></pre></div></div>

<p>Happy hacking,</p>

<p>Martin Alfke</p>
:ET