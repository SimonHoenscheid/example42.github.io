I"¢<p><a href="https://github.com/voxpupuli/hiera-eyaml">Hiera-eyaml</a> is a Hiera backend which can be used to encrypt single keys in Hiera yaml files.</p>

<p>It has become the standard the facto to manage passwords, secrets and confidential data in Puppet.</p>

<p>Itâ€™s now included by default in Hiera 5, (shipped with Puppet version &gt; 4.9), in earlier versions in can be installed as a gem:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install hiera-eyaml
</code></pre></div></div>

<p>On the Puppet server we need to do that also in Puppet environment:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>puppetserver gem install hiera-eyaml
</code></pre></div></div>

<p>To configure it we need to specify the backend in <code class="highlighter-rouge">hiera.yaml</code> and the location of the keys used to encrypt the data. Syntax for Hiera &lt; 5 is something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
:backends:
  - eyaml

:eyaml:
  :datadir: "/etc/puppetlabs/code/environments/%{environment}/data"
  :pkcs7_private_key: /etc/puppetlabs/puppet/keys/private_key.pkcs7.pem
  :pkcs7_public_key:  /etc/puppetlabs/puppet/keys/public_key.pkcs7.pem
  :extension: 'yaml'
</code></pre></div></div>

<p>Syntax for Hiera version 5 is like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
version: 5
defaults:
  datadir: data
  data_hash: yaml_data
hierarchy:
  - name: "Eyaml hierarchy"
    lookup_key: eyaml_lookup_key # eyaml backend
    paths:
      - "nodes/%{trusted.certname}.yaml"
      - "common.yaml"
    options:
        pkcs7_private_key: "/etc/puppetlabs/puppet/keys/private_key.pkcs7.pem"
        pkcs7_public_key: "/etc/puppetlabs/puppet/keys/public_key.pkcs7.pem"
</code></pre></div></div>

<p>The ge provides the <code class="highlighter-rouge">eyaml</code> command, which can be used to perform any Hiera.eyaml related operation.</p>

<p>Before starting to encrypt data a pair of public and private keys has to be created:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyaml createkeys
</code></pre></div></div>

<p>This creates in the <code class="highlighter-rouge">keys</code> directory (relative to the current working directory) the <code class="highlighter-rouge">private_key.pkcs7.pem</code> and <code class="highlighter-rouge">public_key.pkcs7.pem</code> files. The first one should never be shared and must be managed in a safe way, for this reason the keys (at least the private one) should not be added to the control-repo git repository and must be readable by the user running the Puppet Server (<code class="highlighter-rouge">/etc/puppetlabs/puppet/keys</code> is a sane path, but could be anything).</p>

<p>Both of these file must be placed wherever Hiera files are evaluated: that means basically all the Puppet Servers but also, eventually, on developers workstations, if Puppet code is tested locally via Vagrant.</p>

<p>To avoid the need to share private keys to all developers, we recommend, anyway, to  avoid to encrypt data in Hiera files used by machines running in Vagrant.</p>

<p>So for example, if we have a Hiera layer which represent a machine environment or tier, and for Vagrant nodes we use the <code class="highlighter-rouge">devel</code> tier, we can override eventually encrypted data in a general <code class="highlighter-rouge">common.yaml</code> with clear text entries in a Vagrant specific layer (like <code class="highlighter-rouge">"tier/devel.yaml"</code>). Just know that we need the private key when encrypted data is looked for, if we manage to have no encrypted data for servers running under Vagrant, Hiera eyaml works flawlessly even if the public and private keys are not stored locally.</p>

<h3 id="creating-encrypted-hiera-values">Creating encrypted Hiera values</h3>

<p>We can generate the encrypted value of any Hiera key with the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyaml encrypt -l 'mysql::root_password' -s 'V3ryS3cr3T!'
</code></pre></div></div>

<p>This will print on stdout both the plain encrypted string and a block of configuration that we can directly copy in our yaml files as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
mysql::root_password: &gt; ENC[PKCS7,MIIBeQYJKoZIhvcNAQcDoIIBajCCAWYCAQAxggEhMII  [...]
</code></pre></div></div>

<p>Note that the value is in the format ENC[PKCS7,Encrypted_Value].</p>

<p>Since we have the password stored in plain text in our bash history, we should clean it using the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>history | grep encrypt
572  eyaml encrypt -l 'mysql::root_password' -s 'V3ryS3cr3T!'
history -d 572
</code></pre></div></div>

<p>Alternatively we can directly edit Hiera yaml files  with the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyaml edit hieradata/common.eyaml
</code></pre></div></div>

<p>Our editor of preference will open the file and decrypt the encrypted values eventually present so that we can edit our secrets in clear text and save the file again (of course, we can do this only on a machine where we have access to the private key).</p>

<p>To add a new encrypted key to a file we can open it with <code class="highlighter-rouge">eyaml edit</code> and add a key with a syntax like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
mysql::root_password: DEC::PKCS7[my_password]!
</code></pre></div></div>

<p>The string <code class="highlighter-rouge">my_password</code> (our password in clear text) will be encrypted once the file is saved.</p>

<p>To show the decrypted content of an eyaml file, we can use the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eyaml decrypt -f hieradata/common.eyaml
</code></pre></div></div>

<p>Since hiera-eyaml manages both clear text and encrypted values, we can use it as our only backend if we want to work only on yaml files, so itâ€™s pointless to use both yaml and eyaml backends.</p>

<p>Hiera-eyaml has been originally created by <a href="https://github.com/TomPoulton">Tom Poulton</a> then continued as a community effort which, given its popularity, at a certain point was directly incorporated in upstream Puppet, as it happened with the same <a href="https://github.com/ripienaar">RIPienaar</a>â€™s Hiera.</p>

<p>A wonderful example of how the community has helped in shaping Puppet.</p>

<p>Alessandro Franceschi</p>
:ET