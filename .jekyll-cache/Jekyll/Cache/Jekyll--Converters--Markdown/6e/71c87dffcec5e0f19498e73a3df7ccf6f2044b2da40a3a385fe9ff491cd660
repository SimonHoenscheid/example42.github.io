I"´#<p>Working on Puppet code with least possible effort requires a properly setup of a suitable workstation environment.
Usually everybody starts playing around with different sets of utilities and tools, learning the hard way about the best usable setup.</p>

<p>This article will guide you to a setup, providing a proper basis for initially working with PSICK, Puppet or Ruby in general.</p>

<p>Puppet Development is based on Ruby.
The first thing we need is a Puppet recommended Ruby version.
As version can change from release to release, therefor we need some flexibility on Ruby versions being available.
Puppet provides a website with information on <a href="https://docs.puppet.com/pe/latest/overview_version_table.html">Component versions in recent Puppet Enterprise releases</a>.
More information regarding ruby development for Puppet is mentioned in the <a href="https://docs.puppet.com/puppet/4.10/system_requirements.html#prerequisites">System Requirements - Section Prerequisites</a>.</p>

<p>The usually preferred method uses Ruby in user space. This allows work without super user privileges.
There are two possible solutions:</p>

<ul>
  <li><a href="https://rvm.io">rvm</a></li>
  <li><a href="https://github.com/rbenv/rbenv">rbenv</a></li>
</ul>

<p>Within this posting we will use rbenv.</p>

<h1 id="system-preparation">System preparation</h1>

<p>As we might need to install ruby from source, several development and application packages are required:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># RedHat/CentOS:
yum install -y git gcc make bzip2
yum install -y openssl-devel readline-devel zlib-devel gcc-c++

# Debian/Ubuntu:
apt-get install -y git gcc make bzip2
apt-get install -y libssl-dev libreadline-dev zlib1g-dev g++
</code></pre></div></div>

<p>On OS X and macOS Xcode installation is required. Then install the Command Line Tools:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div></div>

<h1 id="installation-of-rbenv">Installation of rbenv</h1>

<p>Installation of rbenv is done as a non-root user</p>

<p>First we clone the rbenv github repository:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/rbenv.git ~/.rbenv
</code></pre></div></div>

<p>Now we can compile shell extensions (this step is optional)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src
</code></pre></div></div>

<p>Now we add the rbenv executable path to our PATH environment variable:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># RedHat/CentOS/OS X/macOS:
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile

# Debian/Ubuntu:
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
</code></pre></div></div>

<p>For the next step we need output from rbenv, which we will add to our shell:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/.rbenv/bin/rbenv init
</code></pre></div></div>

<p>The output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># RedHat/CentOS/OS X/macOS:
# Load rbenv automatically by appending
# the following to ~/.bash_profile:

eval "$(rbenv init -)"

# Debian/Ubuntu:
# Load rbenv automatically by appending
# the following to ~/.bashrc:

eval "$(rbenv init -)"
</code></pre></div></div>

<p>Follow the provided information and add the mentioned line to your shell environment.</p>

<p>Next we need to take care on possible ways to install ruby versions. This is not part of rbenv directly but placed into a separate repository which delivers an extension to rbenv: <a href="https://github.com/rbenv/ruby-build">ruby-build</a></p>

<p>Just run the following git command will place the code into proper location:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre></div></div>

<p>Remember to refresh your shell:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exec bash
</code></pre></div></div>

<p>Verify functionality of rbenv:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv version
</code></pre></div></div>

<p>This should return the following output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>system (set by /home/tuxmea/.rbenv/version)
</code></pre></div></div>

<h1 id="install-ruby-versions">Install ruby versions</h1>

<p>Puppet 4 uses Ruby 2.1.9, Puppet 5 uses Ruby 2.4.1</p>

<p>Install both ruby version by running the following command:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv install 2.1.9
</code></pre></div></div>

<p>Verify installation of new ruby version:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$rbenv versions
  2.1.9
</code></pre></div></div>

<h1 id="install-ruby-basic-extensions">Install ruby basic extensions</h1>

<p>Now we activate the ruby version to install some basic ruby extensions which are required for further development:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv shell 2.1.9
gem install bundler wirble pry
rbenv shell --unset
</code></pre></div></div>

<p>Bundler is used to install ruby extensions required by some development into another path. This allows you to run development and testing even when there is version mismatch between some application you are working on.</p>

<p>Wirble is an irb (interactive ruby shell) extension which offers syntax highlighting and tab completion.</p>

<p>Pry is a ruby debugger. During development one can set breakpoints where pry will open an irb session within the running application.</p>

<p>Configuration for wirble irb extension is done in ~/.irbrc</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require 'rubygems'
require 'wirble'
Wirble.init
Wirble.colorize
</code></pre></div></div>

<p>Wirble and pry are not required for Puppet testing, but recommended extensions for development of custom facts, functions, types or providers.</p>

<p>Repeat the steps mentioned above with ruby version 2.4.1 to be prepared for Puppet 5 code testing!</p>

<h1 id="git-prompt">GIT Prompt</h1>

<p>As we are working on a GIT repository, it is highly recommended to have an informative shell prompt delivering information about your actual repository state.</p>

<p>For bash shells one wants to check <a href="https://github.com/magicmonty/bash-git-prompt">git bash prompt</a>, for zsh shells one might consider using <a href="http://ohmyz.sh/">oh my zsh</a>.</p>

<p>For git bash prompt the following steps are required:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1
</code></pre></div></div>

<p>Now enable the git bash prompt in your shell:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># RedHat/CentOS/OS X/macOS:
cat &lt;&lt;- EOF &gt;&gt; ~/.bash_profile
# git bash prompt
GIT_PROMPT_ONLY_IN_REPO=1
source ~/.bash-git-prompt/gitprompt.sh
EOF

# Debian/Ubuntu:
cat &lt;&lt; EOF &gt;&gt; ~/.bashrc
# git bash prompt
GIT_PROMPT_ONLY_IN_REPO=1
source ~/.bash-git-prompt/gitprompt.sh
EOF
</code></pre></div></div>

<p>Donâ€™t forget to reinitialize your shell <code class="highlighter-rouge">exec bash</code></p>

<h1 id="start-working-on-psick">Start working on PSICK</h1>

<p>Now clone the PSICK repository:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/example42/psick.git
</code></pre></div></div>

<p>When changing into the psick directory the default ruby version is selected automatically by using content from .ruby-version file.
Additionally you will se the default branch at the shell prompt:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[mea@puppet ~]$
[mea@puppet ~]$ cd psick/
âœ” ~/psick [production L|âœ”]
</code></pre></div></div>

<p>Now it is possible to install all ruby gems required for testing into a separate path:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install --path vendor
</code></pre></div></div>

<p>Next you can run tests. Tests are not yet complete but under development.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># e.g.

# get puppet version used for testing
bundle exec puppet --version

# list all rake tasks
bundle exec rake -T

# install modules from Puppetfile
bundle exec r10k puppetfile install -v
</code></pre></div></div>

<p>Happy testing, developing and puppetizing.</p>

<p>Martin Alfke</p>
:ET